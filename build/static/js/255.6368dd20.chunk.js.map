{"version":3,"file":"static/js/255.6368dd20.chunk.js","mappings":"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","sources":["components/form/FormInput.tsx","components/form/VerticalForm.tsx","../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/DropdownButton.js","pages/forms/Basic.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/@restart/ui/esm/DataKey.js","../node_modules/@restart/ui/esm/useWindow.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/querySelectorAll.js","../node_modules/dom-helpers/esm/removeEventListener.js","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js"],"sourcesContent":["import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n})]);","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\n\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","import { useForm } from 'react-hook-form';\nimport { Row, Col, Card, Form, FloatingLabel, InputGroup, Button, Dropdown, DropdownButton } from 'react-bootstrap';\nimport classNames from 'classnames';\nimport { useState } from 'react';\n// hooks\nimport { usePageTitle } from '../../hooks';\n\n// components\nimport { FormInput } from '../../components/form';\nimport { Typeahead } from 'react-bootstrap-typeahead';\n\ntype Colors = {\n    variant: string;\n    name: string;\n};\n\nconst BasicInputElements = () => {\n    /*\n     * form methods\n     */\n    const methods = useForm({\n        defaultValues: {\n            password: '12345',\n            statictext: 'email@example.com',\n            color: '#35b8e0',\n        },\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Types</h4>\n                <p className=\"sub-header\">\n                    Most common form control, text-based input fields. Includes support for all HTML5 types:{' '}\n                    <code>text</code>, <code>password</code>, <code>datetime</code>, <code>datetime-local</code>,{' '}\n                    <code>date</code>, <code>month</code>, <code>time</code>, <code>week</code>, <code>number</code>,{' '}\n                    <code>email</code>, <code>url</code>, <code>search</code>, <code>tel</code>, and <code>color</code>.\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <form onSubmit={handleSubmit(() => {})}>\n                            <FormInput\n                                label=\"Text\"\n                                type=\"text\"\n                                name=\"text\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"text\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Email\"\n                                type=\"email\"\n                                name=\"email\"\n                                placeholder=\"Email\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"email\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Show/Hide Password\"\n                                type=\"password\"\n                                name=\"password\"\n                                placeholder=\"password placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"password\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Placeholder\"\n                                type=\"text\"\n                                name=\"placeholder\"\n                                placeholder=\"placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"placeholder\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Text Area\"\n                                type=\"textarea\"\n                                name=\"textarea\"\n                                rows={5}\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"textarea\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Read only\"\n                                type=\"text\"\n                                name=\"text1\"\n                                id=\"text1\"\n                                placeholder=\"Readonly value\"\n                                readOnly\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"text1\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Disabled\"\n                                type=\"text\"\n                                name=\"text2\"\n                                id=\"text2\"\n                                placeholder=\"Disabled value\"\n                                disabled\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"text2\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Static control\"\n                                type=\"text\"\n                                name=\"statictext\"\n                                placeholder=\"Disabled\"\n                                readOnly\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"statictext\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label htmlFor=\"text3\" className=\"form-label\">\n                                    Helping text\n                                </Form.Label>\n                                <Form.Control type=\"text\" name=\"text\" id=\"text3\" placeholder=\"Helping text\" />\n                                <Form.Text>\n                                    A block of help text that breaks onto a new line and may extend beyond one line.\n                                </Form.Text>\n                            </Form.Group>\n                        </form>\n                    </Col>\n\n                    <Col lg={6}>\n                        <form onSubmit={handleSubmit(() => {})}>\n                            <FormInput\n                                name=\"select\"\n                                label=\"Input Select\"\n                                type=\"select\"\n                                containerClass=\"mb-3\"\n                                className=\"form-select\"\n                                register={register}\n                                key=\"select\"\n                                errors={errors}\n                                control={control}\n                            >\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </FormInput>\n\n                            <FormInput\n                                name=\"selectMulti\"\n                                label=\"Multiple Select\"\n                                type=\"select\"\n                                multiple\n                                containerClass=\"mb-3\"\n                                className=\"form-select\"\n                                register={register}\n                                key=\"selectMulti\"\n                                errors={errors}\n                                control={control}\n                            >\n                                <option>1</option>\n                                <option>2</option>\n                                <option>3</option>\n                                <option>4</option>\n                                <option>5</option>\n                            </FormInput>\n\n                            <FormInput\n                                label=\"Default file input\"\n                                type=\"file\"\n                                name=\"file\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"file\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Date\"\n                                type=\"date\"\n                                name=\"date\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"date\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Month\"\n                                type=\"month\"\n                                name=\"month\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"month\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Time\"\n                                type=\"time\"\n                                name=\"time\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"time\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Week\"\n                                type=\"week\"\n                                name=\"week\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"week\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Number\"\n                                type=\"number\"\n                                name=\"number\"\n                                placeholder=\"number placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"number\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <FormInput\n                                label=\"Color\"\n                                type=\"color\"\n                                name=\"color\"\n                                className=\"w-100\"\n                                placeholder=\"color placeholder\"\n                                containerClass={'mb-3'}\n                                register={register}\n                                key=\"color\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <Form.Group className=\"mb-0\">\n                                <Form.Label htmlFor=\"exampleRange\" className=\"form-label\">\n                                    Range\n                                </Form.Label>\n                                <Form.Range />\n                            </Form.Group>\n                        </form>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FloatingLabels = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Floating labels</h4>\n                <p className=\"sub-header\">\n                    Wrap a <code>&lt;Form.Control&gt;</code> element in <code>&lt;FloatingLabel&gt;</code>\n                    to enable floating labels with Bootstrap’s textual form fields. A <code>placeholder</code>\n                    is required on each <code>&lt;Form.Control&gt;</code> as our method of CSS-only floating labels uses\n                    the <code>:placeholder-shown</code> pseudo-element.\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <h5 className=\"mb-3\">Floating Example</h5>\n                        <FloatingLabel controlId=\"floatingInput\" label=\"Email address\" className=\"mb-3\">\n                            <Form.Control type=\"email\" placeholder=\"name@example.com\" />\n                        </FloatingLabel>\n                        <FloatingLabel controlId=\"floatingPassword\" label=\"Password\" className=\"mb-3\">\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\n                        </FloatingLabel>\n                        <FloatingLabel controlId=\"floatingTextarea2\" label=\"Comments\">\n                            <Form.Control\n                                as=\"textarea\"\n                                placeholder=\"Leave a comment here\"\n                                style={{ height: '100px' }}\n                            />\n                        </FloatingLabel>\n                    </Col>\n\n                    <Col lg={6}>\n                        <h5 className=\"mb-3\">Selects</h5>\n                        <FloatingLabel controlId=\"floatingSelect\" label=\"Works with selects\" className=\"mb-3\">\n                            <Form.Select aria-label=\"Floating label select example\">\n                                <option>Open this select menu</option>\n                                <option value=\"1\">One</option>\n                                <option value=\"2\">Two</option>\n                                <option value=\"3\">Three</option>\n                            </Form.Select>\n                        </FloatingLabel>\n\n                        <Row className=\"g-2\">\n                            <Col md>\n                                <FloatingLabel controlId=\"floatingInputGrid\" label=\"Email address\">\n                                    <Form.Control\n                                        type=\"email\"\n                                        placeholder=\"name@example.com\"\n                                        defaultValue=\"name@example.com\"\n                                    />\n                                </FloatingLabel>\n                            </Col>\n                            <Col md>\n                                <FloatingLabel controlId=\"floatingSelectGrid\" label=\"Works with selects\">\n                                    <Form.Select aria-label=\"Floating label select example\">\n                                        <option>Open this select menu</option>\n                                        <option value=\"1\">One</option>\n                                        <option value=\"2\">Two</option>\n                                        <option value=\"3\">Three</option>\n                                    </Form.Select>\n                                </FloatingLabel>\n                            </Col>\n                        </Row>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst SelectInput = () => {\n    return (\n        <>\n            <h4 className=\"header-title\">Select menu</h4>\n            <p className=\"sub-header\">\n                Custom <code>&lt;select&gt;</code> menus need only a custom class, <code>.custom-select</code> to\n                trigger the custom styles.\n            </p>\n\n            <Form.Group>\n                <Form.Select className=\"mt-3\" aria-label=\"Default select example\">\n                    <option defaultValue=\"0\">Open this select menu</option>\n                    <option value=\"1\">One</option>\n                    <option value=\"2\">Two</option>\n                    <option value=\"3\">Three</option>\n                </Form.Select>\n            </Form.Group>\n        </>\n    );\n};\n\nconst Switches = () => {\n    return (\n        <>\n            <h4 className=\"header-title mt-4\">Switches</h4>\n            <p className=\"text-muted\">\n                A switch has the markup of a custom checkbox but uses the <code>.custom-switch</code> class to render a\n                toggle switch. Switches also support the <code>disabled</code> attribute.\n            </p>\n\n            <Form>\n                <Form.Check type=\"switch\" id=\"custom-switch\" label=\"Toggle this switch element\" />\n                <Form.Check\n                    disabled\n                    type=\"switch\"\n                    label=\"Disabled switch element\"\n                    id=\"disabled-custom-switch\"\n                    className=\"mt-1\"\n                />\n            </Form>\n        </>\n    );\n};\n\nconst CustomCheckboxes = () => {\n    return (\n        <>\n            <Form.Check type=\"checkbox\" id=\"default-checkbox1\" label=\"Check this custom checkbox\" />\n            <Form.Check type=\"checkbox\" id=\"default-checkbox2\" label=\"Check this custom checkbox\" />\n        </>\n    );\n};\n\nconst CustomRadios = () => {\n    return (\n        <>\n            <Form.Check type=\"radio\" id=\"default-radio1\" name=\"customRadio\" label=\"Toggle this custom radio\" />\n            <Form.Check type=\"radio\" id=\"default-radio2\" name=\"customRadio\" label=\"Or toggle this other custom radio\" />\n        </>\n    );\n};\n\nconst InputSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Sizes</h4>\n                <p className=\"sub-header\">\n                    Use size on <code>&lt;FormControl&gt;</code> and <code>&lt;FormLabel&gt;</code> to change the size\n                    of inputs and labels respectively.\n                </p>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"small\">Small</Form.Label>\n                        <Form.Control type=\"text\" name=\"small\" id=\"small\" placeholder=\"Small\" size=\"sm\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Normal\">Normal</Form.Label>\n                        <Form.Control type=\"text\" name=\"Normal\" id=\"Normal\" placeholder=\"Normal\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"Large\">Large</Form.Label>\n                        <Form.Control type=\"text\" name=\"Large\" id=\"Large\" placeholder=\"Large\" size=\"lg\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-0\">\n                        <Form.Label htmlFor=\"grid\">Grid Sizes</Form.Label>\n                        <Row>\n                            <Col sm={4}>\n                                <Form.Control type=\"text\" name=\"grid\" id=\"grid\" placeholder=\".col-sm-4\" />\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\ntype Option = string | Record<string, any>;\nconst InputGroups = () => {\n    const [singleSelections, setSingleSelections] = useState<Option[]>([]);\n\n    const options: Array<Option> = [\n        { id: 1, value: 1, label: 'Jaime Fonseca | 9999-9999' },\n        { id: 2, value: 2, label: 'Gabriel Sosa | 3232-3232' },\n        { id: 3, value: 3, label: 'Otra Persona | 8181-8181' }\n    ];\n\n    const onChangeSingleSelection = (selected: Option[]) => {\n        setSingleSelections(selected);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Group</h4>\n                <p className=\"sub-header\">\n                    Easily extend form conrols by adding text, buttons, or button groups on either side of textual\n                    inputs, custom selects, and custom file inputs\n                </p>\n\n                <Form>\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Static\">Static</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                            <Typeahead\n                                id=\"customer\"\n                                labelKey={'label'}\n                                multiple={false}\n                                onChange={onChangeSingleSelection}\n                                options={options}\n                                placeholder=\"Escoge un cliente...\"\n                                selected={singleSelections}\n                            />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Dropdown\">Dropdown</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <DropdownButton variant=\"primary\" title=\"Dropdown\" id=\"input-group-dropdown-1\">\n                                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                                <Dropdown.Divider />\n                                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n                            </DropdownButton>\n                            <Form.Control aria-label=\"Text input with dropdown button\" />\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Form.Group>\n                        <Form.Label htmlFor=\"Button\">Button</Form.Label>\n                        <InputGroup className=\"mb-3\">\n                            <Typeahead\n                                id=\"customer\"\n                                labelKey={'label'}\n                                multiple={false}\n                                onChange={onChangeSingleSelection}\n                                options={options}\n                                placeholder=\"Escoge un cliente...\"\n                                selected={singleSelections}\n                            />\n                            <Button variant=\"dark\" id=\"button-addon2\">\n                                Button\n                            </Button>\n                        </InputGroup>\n                    </Form.Group>\n\n                    <Row className=\"g-2\">\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"file\">Default file input</Form.Label>\n                                <Form.Control type=\"file\" />\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group>\n                                <Form.Label htmlFor=\"formFileMultiple01\">Multiple files input</Form.Label>\n                                <Form.Control type=\"file\" multiple />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DefaultForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Basic Example</h4>\n\n                <Form>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail2\">Email</Form.Label>\n                        <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail2\" placeholder=\"Enter your email\" />\n                        <Form.Text>We'll never share your email with anyone else.</Form.Text>\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword2\">Password</Form.Label>\n                        <Form.Control\n                            type=\"password\"\n                            name=\"password\"\n                            id=\"examplePassword2\"\n                            placeholder=\"password placeholder\"\n                        />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" id=\"formGridCheckbox\">\n                        <Form.Check type=\"checkbox\" id=\"formGridCheckbox\" label=\"Check me out\" />\n                    </Form.Group>\n\n                    <Button type=\"submit\">Submit</Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mb-3 header-title\">Horizontal Form</h4>\n                <Form>\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"exampleEmail3\" column sm={3}>\n                            Email\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control type=\"email\" name=\"email\" id=\"exampleEmail3\" placeholder=\"Email\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword3\" column sm={3}>\n                            Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword3\"\n                                placeholder=\"Password\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\">\n                        <Form.Label htmlFor=\"examplePassword4\" column sm={3}>\n                            Re-Password\n                        </Form.Label>\n                        <Col sm={9}>\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword4\"\n                                placeholder=\"Retype Password\"\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-3\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Form.Check label=\"Check me out !\" id=\"checkmeout\" />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-0\" controlId=\"formHorizontalCheck\">\n                        <Col sm={{ span: 9, offset: 3 }}>\n                            <Button variant=\"info\" type=\"submit\">\n                                Sign in\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InlineForm = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Column sizing</h4>\n\n                <p className=\"sub-header\">\n                    As shown in the previous examples, our grid system allows you to place any number of{' '}\n                    <code>.col</code>s within a <code>.row</code>.\n                </p>\n                <Form className=\"row row-cols-lg-auto g-3 align-items-center\">\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                readOnly\n                                type=\"email\"\n                                name=\"email\"\n                                id=\"exampleEmail4\"\n                                bsPrefix=\"form-control-plaintext\"\n                                placeholder=\"email@example.com\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Form.Group className=\"mb-2 me-sm-2 mb-sm-0\">\n                            <Form.Control\n                                type=\"password\"\n                                name=\"password\"\n                                id=\"examplePassword5\"\n                                placeholder=\"Password\"\n                            />\n                        </Form.Group>\n                    </div>\n\n                    <div className=\"col-12\">\n                        <Button color=\"primary\" type=\"submit\">\n                            Confirm identity\n                        </Button>\n                    </div>\n                </Form>\n\n                <h6 className=\"font-13 mt-3\">Auto-sizing</h6>\n\n                <Form>\n                    <Row className=\"align-items-center\">\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInput\" visuallyHidden>\n                                Name\n                            </Form.Label>\n                            <Form.Control className=\"mb-2\" id=\"inlineFormInput\" placeholder=\"Jane Doe\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Label htmlFor=\"inlineFormInputGroup\" visuallyHidden>\n                                Username\n                            </Form.Label>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Text>@</InputGroup.Text>\n                                <Form.Control id=\"inlineFormInputGroup\" placeholder=\"Username\" />\n                            </InputGroup>\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Form.Check type=\"checkbox\" id=\"autoSizingCheck\" className=\"mb-2\" label=\"Remember me\" />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <Button type=\"submit\" className=\"mb-2\">\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormGrid = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Gutters</h4>\n                <p className=\"text-muted font-13\">More complex layouts can also be created with the grid system.</p>\n\n                <Form>\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} controlId=\"formGridEmail\">\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" placeholder=\"Email\" />\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridPassword\">\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control type=\"password\" placeholder=\"Password\" />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\n                        <Form.Label>Address</Form.Label>\n                        <Form.Control placeholder=\"1234 Main St\" />\n                    </Form.Group>\n\n                    <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\n                        <Form.Label>Address 2</Form.Label>\n                        <Form.Control placeholder=\"Apartment, studio, or floor\" />\n                    </Form.Group>\n\n                    <Row className=\"mb-3\">\n                        <Form.Group as={Col} md={6} controlId=\"formGridCity\">\n                            <Form.Label>City</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n\n                        <Form.Group as={Col} md={4} controlId=\"formGridState\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Select defaultValue=\"Choose...\">\n                                <option>Choose...</option>\n                                <option>Option 1</option>\n                                <option>Option 2</option>\n                                <option>Option 3</option>\n                            </Form.Select>\n                        </Form.Group>\n\n                        <Form.Group as={Col} md={2} controlId=\"formGridZip\">\n                            <Form.Label>Zip</Form.Label>\n                            <Form.Control />\n                        </Form.Group>\n                    </Row>\n\n                    <Form.Group className=\"mb-3\" id=\"formGridCheckbox2\">\n                        <Form.Check type=\"checkbox\" label=\"Check this custom checkbox\" id=\"formGridCheckbox2\" />\n                    </Form.Group>\n\n                    <Button type=\"submit\" className=\"waves-effect waves-light\">\n                        Sign in\n                    </Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst CheckboxBasic = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n        {\n            variant: 'info',\n            name: 'Info',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom checkbox - Basic</h4>\n\n            <p className=\"sub-header\">\n                Supports bootstrap brand colors: <code>.form-check</code>,<code>.form-check-*</code> etc.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        key={index.toString()}\n                        label={item.name}\n                        type=\"checkbox\"\n                        id={`basic-checkbox-${index}`}\n                        className={classNames('mb-2', 'form-check-' + item.variant)}\n                        aria-label=\"option 1\"\n                        defaultChecked={index % 2 === 0}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nconst CheckboxCircled = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n        {\n            variant: 'info',\n            name: 'Info',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom checkbox - Circled</h4>\n\n            <p className=\"sub-header\">\n                <code>.rounded-circle</code> for roundness.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        key={index.toString()}\n                        id={`circle-checkbox-${index}`}\n                        className={classNames('mb-2', 'form-check', 'form-check-' + item.variant)}\n                    >\n                        <Form.Check.Input type=\"checkbox\" className=\"rounded-circle\" defaultChecked={index % 3 === 0} />\n                        <Form.Check.Label>{item.name} </Form.Check.Label>\n                    </Form.Check>\n                );\n            })}\n        </>\n    );\n};\n\nconst CheckboxDisabled = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom radio - Circled</h4>\n\n            <p className=\"sub-header\">\n                <code>.rounded-circle</code> for roundness.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        key={index.toString()}\n                        label={item.name}\n                        id={`circled-radio-${index}`}\n                        type=\"radio\"\n                        className={classNames('mb-2', 'form-check-' + item.variant)}\n                        aria-label=\"option 1\"\n                        disabled\n                        defaultChecked={index % 3 === 0}\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nconst RadioBasic = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'primary',\n            name: 'Primary',\n        },\n        {\n            variant: 'success',\n            name: 'Success',\n        },\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'warning',\n            name: 'Warning',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n        {\n            variant: 'info',\n            name: 'Info',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom radio - Basic</h4>\n\n            <p className=\"sub-header\">\n                Supports bootstrap brand colors: <code>.form-check</code>,<code>.form-check-*</code> etc.\n            </p>\n            <Row>\n                <Col sm={6}>\n                    {(colors || []).map((item, index) => {\n                        return (\n                            <Form.Check\n                                key={index.toString()}\n                                type=\"radio\"\n                                id={`basic-radio-${index}`}\n                                label={item.name}\n                                className={classNames('mb-2', 'form-check-' + item.variant)}\n                                aria-label=\"option 1\"\n                                name=\"customradio1\"\n                                defaultChecked={index === 2}\n                            />\n                        );\n                    })}\n                </Col>\n                <Col sm={6}>\n                    {(colors || []).map((item, index) => {\n                        return (\n                            <Form.Check\n                                key={index.toString()}\n                                type=\"radio\"\n                                id={`basic-radio2-${index}`}\n                                label={item.name}\n                                className={classNames('mb-2', 'form-check-' + item.variant)}\n                                aria-label=\"option 1\"\n                                defaultChecked={index % 3 === 0}\n                            />\n                        );\n                    })}\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nconst RadioDisabled = () => {\n    const colors: Colors[] = [\n        {\n            variant: 'danger',\n            name: 'Danger',\n        },\n        {\n            variant: 'dark',\n            name: 'Dark',\n        },\n        {\n            variant: 'blue',\n            name: 'Blue',\n        },\n        {\n            variant: 'pink',\n            name: 'Pink',\n        },\n    ];\n    return (\n        <>\n            <h4 className=\"header-title\">Custom checkbox - Circled</h4>\n\n            <p className=\"sub-header\">\n                <code>.rounded-circle</code> for roundness.\n            </p>\n\n            {(colors || []).map((item, index) => {\n                return (\n                    <Form.Check\n                        id={'custom-checkbox-' + item.variant}\n                        type=\"radio\"\n                        key={index.toString()}\n                        label={item.name}\n                        className={classNames('mb-2', 'form-check-' + item.variant)}\n                        aria-label=\"option 1\"\n                        disabled\n                        defaultChecked\n                    />\n                );\n            })}\n        </>\n    );\n};\n\nconst BasicForms = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Form Components',\n        breadCrumbItems: [\n            {\n                path: '/forms/basic',\n                label: 'Forms',\n            },\n            {\n                path: '/forms/basic',\n                label: 'Form Components',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col>\n                    <BasicInputElements />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col md={6}>\n                                    <SelectInput />\n                                    <Switches />\n                                </Col>\n\n                                <Col md={6}>\n                                    <h4 className=\"header-title mt-5 mt-sm-0\">Checkboxes and radios</h4>\n                                    <div className=\"mt-3\">\n                                        <CustomCheckboxes />\n                                    </div>\n                                    <div className=\"mt-3\">\n                                        <CustomRadios />\n                                    </div>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FloatingLabels />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <InputSizes />\n                </Col>\n\n                <Col lg={6}>\n                    <InputGroups />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <DefaultForm />\n                </Col>\n\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <InlineForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <FormGrid />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col md={4}>\n                                    <CheckboxBasic />\n                                </Col>\n\n                                <Col md={4}>\n                                    <CheckboxCircled />\n                                </Col>\n\n                                <Col md={4}>\n                                    <CheckboxDisabled />\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n\n            <Row>\n                <Col>\n                    <Card>\n                        <Card.Body>\n                            <Row>\n                                <Col md={4}>\n                                    <RadioBasic />\n                                </Col>\n\n                                <Col md={4}>\n                                    <RadioDisabled />\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    );\n};\nexport default BasicForms;\n","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexport const PROPERTY_PREFIX = `rrUi`;\nexport function dataAttr(property) {\n  return `${ATTRIBUTE_PREFIX}${property}`;\n}\nexport function dataProp(property) {\n  return `${PROPERTY_PREFIX}${property}`;\n}","import { createContext, useContext } from 'react';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\nexport const WindowProvider = Context.Provider;\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */\n\nexport default function useWindow() {\n  return useContext(Context);\n}","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;"],"names":["PasswordInput","name","placeholder","refCallback","errors","register","control","className","otherProps","useState","showPassword","setShowPassword","type","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","children","labelClassName","containerClass","action","hasEndIcon","undefined","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","formState","noValidate","Array","isArray","map","child","props","React","key","alignDirection","PropTypes","alignPropType","sm","md","lg","xl","xxl","propTypes","href","title","disabled","align","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","bsPrefix","variant","size","DropdownButton","_jsxs","Dropdown","_jsx","DropdownToggle","childBsPrefix","DropdownMenu","role","renderOnMount","displayName","BasicInputElements","password","statictext","color","Card","Row","Col","readOnly","Form","htmlFor","multiple","FloatingLabels","FloatingLabel","controlId","style","height","value","defaultValue","Switches","CustomCheckboxes","CustomRadios","InputSizes","InputGroups","singleSelections","setSingleSelections","options","onChangeSingleSelection","selected","InputGroup","labelKey","onChange","Button","DefaultForm","HorizontalForm","column","span","offset","InlineForm","xs","visuallyHidden","FormGrid","CheckboxBasic","item","index","defaultChecked","toString","CheckboxCircled","CheckboxDisabled","RadioBasic","colors","RadioDisabled","usePageTitle","breadCrumbItems","path","active","toFnRef","current","refA","refB","useMemo","a","b","mergeRefs","dataAttr","property","dataProp","Context","createContext","canUseDOM","window","Provider","useWindow","useContext","optionsSupported","onceSupported","passive","once","addEventListener","removeEventListener","e","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","document","createElement","ownerDocument","toArray","Function","prototype","bind","slice","qsa","element","selector","querySelectorAll","prefix","useBootstrapPrefix","useButtonProps","tagName","buttonProps","Component","defaultProps","CardImg","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context"],"sourceRoot":""}