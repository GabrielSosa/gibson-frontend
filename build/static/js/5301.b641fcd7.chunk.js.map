{"version":3,"file":"static/js/5301.b641fcd7.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/Spinner.js","pages/uikit/Spinners/BorderSpinners.tsx","pages/uikit/Spinners/GrowingSpinners.tsx","pages/uikit/Spinners/ColorBorderSpinners.tsx","pages/uikit/Spinners/ColorGrowingSpinners copy.tsx","pages/uikit/Spinners/AlignmentSpinners.tsx","pages/uikit/Spinners/SpinnersPlacement.tsx","components/Spinner.tsx","pages/uikit/Spinners/SpinnersSize.tsx","pages/uikit/Spinners/ButtonSpinners.tsx","pages/uikit/Spinners/index.tsx","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Spinner = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  variant,\n  animation,\n  size,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  className,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'spinner');\n  const bsSpinnerPrefix = `${bsPrefix}-${animation}`;\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, bsSpinnerPrefix, size && `${bsSpinnerPrefix}-${size}`, variant && `text-${variant}`)\n  });\n});\nSpinner.displayName = 'Spinner';\nexport default Spinner;","import { Card, Spinner } from 'react-bootstrap';\n\nconst BorderedSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Border spinner</h4>\n                <p className=\"text-muted mb-4\">Use the border spinners for a lightweight loading indicator.</p>\n                <Spinner animation=\"border\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default BorderedSpinners;\n","import { Card, Spinner } from 'react-bootstrap';\n\nconst GrowingSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Growing spinner</h4>\n                <p className=\"text-muted mb-4\">\n                    If you don’t fancy a border spinner, switch to the grow spinner. While it doesn’t technically spin,\n                    it does repeatedly grow!\n                </p>\n                <Spinner animation=\"grow\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default GrowingSpinners;\n","import { Card, Spinner } from 'react-bootstrap';\n\nconst colors: string[] = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\n\nconst ColorBorderSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Color Border spinner</h4>\n                <p className=\"text-muted mb-4\">\n                    All standard visual variants are available for both animation styles by setting the{' '}\n                    <code>variant</code> property.\n                </p>\n\n                {(colors || []).map((color, index) => {\n                    return <Spinner key={index.toString()} className=\"m-2\" variant={color} animation=\"border\" />;\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ColorBorderSpinners;\n","import { Card, Spinner } from 'react-bootstrap';\n\nconst colors: string[] = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark'];\n\nconst ColorGrowingSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Color Growing spinner</h4>\n                <p className=\"text-muted mb-4\">\n                    All standard visual variants are available for both animation styles by setting the{' '}\n                    <code>variant</code> property.\n                </p>\n\n                {(colors || []).map((color, index) => {\n                    return <Spinner key={index.toString()} className=\"m-2\" variant={color} animation=\"grow\" />;\n                })}\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ColorGrowingSpinners;\n","import { Card, Spinner } from 'react-bootstrap';\n\nconst AlignmentSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Alignment</h4>\n                <p className=\"text-muted mb-4\">\n                    Use flexbox utilities, float utilities, or text alignment utilities to place spinners exactly where\n                    you need them in any situation.\n                </p>\n                <div className=\"d-flex justify-content-center\">\n                    <Spinner animation=\"border\" />\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default AlignmentSpinners;\n","import { Card, Spinner } from 'react-bootstrap';\n\nconst SpinnerPlacements = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Placement</h4>\n                <p className=\"text-muted mb-4\">\n                    Use <code>flexbox utilities</code>, <code>float utilities</code>, or <code>text alignment</code>{' '}\n                    utilities to place spinners exactly where you need them in any situation.\n                </p>\n                <div className=\"d-flex align-items-center\">\n                    <strong>Loading...</strong>\n                    <Spinner className=\"ms-auto\" animation=\"border\" />\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default SpinnerPlacements;\n","import classNames from 'classnames';\n\ntype SpinnerProps = {\n    tag?: string;\n    className?: string;\n    size?: 'lg' | 'md' | 'sm';\n    type?: 'bordered' | 'grow';\n    color?: string;\n    children?: React.ReactNode;\n};\n\n// Spinner\nconst Spinner = (props: SpinnerProps) => {\n    const children = props.children || null;\n    const Tag: any = props.tag || 'div';\n    const color = props.color || 'secondary';\n    const size = props.size || '';\n\n    return (\n        <Tag\n            role=\"status\"\n            className={classNames(\n                {\n                    'spinner-border': props.type === 'bordered',\n                    'spinner-grow': props.type === 'grow',\n                },\n                [`text-${color}`],\n                { [`avatar-${size}`]: size },\n                props.className\n            )}\n        >\n            {children}\n        </Tag>\n    );\n};\n\nSpinner.defaultProps = {\n    tag: 'div',\n    type: 'bordered',\n};\n\nexport default Spinner;\n","import { Card } from 'react-bootstrap';\n\n// component\nimport Spinner from '../../../components/Spinner';\n\nconst SpinnersSizes = () => {\n    const sizes: ('lg' | 'md' | 'sm')[] = ['lg', 'md', 'sm'];\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Size</h4>\n                <p className=\"text-muted mb-4\">\n                    Add <code>size</code> attribute to make spinner with sizes including lg, md or sm.\n                </p>\n                <div className=\"row\">\n                    {(sizes || []).map((size, index) => {\n                        return (\n                            <div key={index.toString()} className=\"col-lg-6\">\n                                <Spinner className=\"text-primary m-2\" color=\"primary\" size={size} />\n                                <Spinner className=\"text-secondary m-2\" type=\"grow\" size={size} />\n                            </div>\n                        );\n                    })}\n                    <div className=\"col-lg-6\">\n                        <Spinner className=\"spinner-border-sm m-2\" />\n                        <Spinner type=\"grow\" className=\"spinner-grow-sm m-2\" />\n                    </div>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default SpinnersSizes;\n","import { Button, Card, Col, Row } from 'react-bootstrap';\n\n// component\nimport Spinner from '../../../components/Spinner';\n\nconst ButtonSpinners = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"mt-0 header-title\">Buttons spinner</h4>\n                <p className=\"text-muted mb-4\">\n                    Use spinners within buttons to indicate an action is currently processing or taking place. You may\n                    also swap the text out of the spinner element and utilize button text as needed.\n                </p>\n                <Row>\n                    <Col md={6}>\n                        <div className=\"button-list mb-1 mb-sm-0\">\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-border-sm\" tag=\"span\" color=\"white\" />\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </Button>\n\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-border-sm me-1\" tag=\"span\" color=\"white\" />\n                                Loading...\n                            </Button>\n                        </div>\n                    </Col>\n                    <Col md={6}>\n                        <div className=\"button-list\">\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-grow-sm\" tag=\"span\" color=\"white\" type=\"grow\" />\n                                <span className=\"visually-hidden\">Loading...</span>\n                            </Button>\n\n                            <Button color=\"primary\" disabled>\n                                <Spinner className=\"spinner-grow-sm me-1\" tag=\"span\" color=\"white\" type=\"grow\" />\n                                Loading...\n                            </Button>\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default ButtonSpinners;\n","import { Col, Row } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport BorderedSpinners from './BorderSpinners';\nimport GrowingSpinners from './GrowingSpinners';\nimport ColorBorderSpinners from './ColorBorderSpinners';\nimport ColorGrowingSpinners from './ColorGrowingSpinners copy';\nimport AlignmentSpinners from './AlignmentSpinners';\nimport SpinnerPlacements from './SpinnersPlacement';\nimport SpinnersSizes from './SpinnersSize';\nimport ButtonSpinners from './ButtonSpinners';\n\nconst Spinners = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Spinners',\n        breadCrumbItems: [\n            {\n                path: '/base-ui/spinners',\n                label: 'Base UI',\n            },\n            {\n                path: '/base-ui/spinners',\n                label: 'Spinners',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col lg={6}>\n                    <BorderedSpinners />\n                </Col>\n                <Col lg={6}>\n                    <GrowingSpinners />\n                </Col>\n            </Row>\n            <Row>\n                <Col lg={6}>\n                    <ColorBorderSpinners />\n                </Col>\n                <Col lg={6}>\n                    <ColorGrowingSpinners />\n                </Col>\n            </Row>\n            <Row>\n                <Col lg={6}>\n                    <AlignmentSpinners />\n                </Col>\n                <Col lg={6}>\n                    <SpinnerPlacements />\n                </Col>\n            </Row>\n            <Row>\n                <Col lg={6}>\n                    <SpinnersSizes />\n                </Col>\n                <Col lg={6}>\n                    <ButtonSpinners />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default Spinners;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["Spinner","React","ref","bsPrefix","variant","animation","size","as","Component","className","props","useBootstrapPrefix","bsSpinnerPrefix","_jsx","classNames","displayName","Card","colors","map","color","index","toString","children","Tag","tag","role","type","defaultProps","Row","Col","md","Button","disabled","usePageTitle","title","breadCrumbItems","path","label","active","lg","SpinnersSize","prefix","useButtonProps","tagName","buttonProps","href","CardImg","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","value","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","text","border","body","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","BsComponent","resolvedPrefix","p"],"sourceRoot":""}