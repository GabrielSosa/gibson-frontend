{"version":3,"file":"static/js/5136.e78c6b30.chunk.js","mappings":"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","sources":["pages/uikit/SweetAlerts/Alerts.tsx","pages/uikit/SweetAlerts/index.tsx","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import { withSwal } from 'react-sweetalert2';\n\n// images\nimport logosm from '../../../assets/images/logo-sm.png';\n\nconst Alerts = withSwal((props: any) => {\n    const { swal } = props;\n\n    let timerInterval: NodeJS.Timeout;\n\n    return (\n        <table className=\"table table-borderless table-centered mb-0\">\n            <thead className=\"table-light\">\n                <tr>\n                    <th style={{ width: '50%' }}>Alert Type</th>\n                    <th>Example</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>A basic message</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-basic\"\n                            onClick={() =>\n                                swal.fire({\n                                    title: 'Any fool can use a computer!',\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A title with a text under</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-title\"\n                            onClick={() =>\n                                swal.fire({\n                                    title: 'The Internet?',\n                                    text: 'That thing is still around?',\n                                    icon: 'question',\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A success message!</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-success\"\n                            onClick={() =>\n                                swal.fire({\n                                    title: 'Good job!',\n                                    text: 'You clicked the button!',\n                                    icon: 'success',\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A modal window with a long content inside:</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-long-content\"\n                            onClick={() =>\n                                swal.fire({\n                                    imageUrl: 'https://placeholder.pics/svg/300x1500',\n                                    imageHeight: 1500,\n                                    imageAlt: 'A tall image',\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A custom positioned dialog</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-custom-position\"\n                            onClick={() =>\n                                swal.fire({\n                                    position: 'top-end',\n                                    icon: 'success',\n                                    title: 'Your work has been saved',\n                                    showConfirmButton: false,\n                                    timer: 1500,\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A modal with a title, an error icon, a text, and a footer</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-error\"\n                            onClick={() =>\n                                swal.fire({\n                                    icon: 'error',\n                                    title: 'Oops...',\n                                    text: 'Something went wrong!',\n                                    footer: '<a href>Why do I have this issue?</a>',\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A confirm dialog, with a function attached to the \"Confirm\"-button...</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-warning\"\n                            onClick={() =>\n                                swal\n                                    .fire({\n                                        title: 'Are you sure?',\n                                        text: \"You won't be able to revert this!\",\n                                        icon: 'warning',\n                                        showCancelButton: true,\n                                        confirmButtonColor: '#28bb4b',\n                                        cancelButtonColor: '#f34e4e',\n                                        confirmButtonText: 'Yes, delete it!',\n                                    })\n                                    .then(function (result: { value: any }) {\n                                        if (result.value) {\n                                            swal.fire('Deleted!', 'Your file has been deleted.', 'success');\n                                        }\n                                    })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>By passing a parameter, you can execute something else for \"Cancel\".</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-params\"\n                            onClick={() =>\n                                swal\n                                    .fire({\n                                        title: 'Are you sure?',\n                                        text: \"You won't be able to revert this!\",\n                                        icon: 'warning',\n                                        showCancelButton: true,\n                                        confirmButtonText: 'Yes, delete it!',\n                                        cancelButtonText: 'No, cancel!',\n                                        confirmButtonClass: 'btn btn-success mt-2',\n                                        cancelButtonClass: 'btn btn-danger ms-2 mt-2',\n                                        buttonsStyling: false,\n                                    })\n                                    .then(function (result: { value: any; dismiss: any }) {\n                                        if (result.value) {\n                                            swal.fire({\n                                                title: 'Deleted!',\n                                                text: 'Your file has been deleted.',\n                                                icon: 'success',\n                                                confirmButtonColor: '#4a4fea',\n                                            });\n                                        } else if (\n                                            // Read more about handling dismissals\n                                            result.dismiss === swal.DismissReason.cancel\n                                        ) {\n                                            swal.fire({\n                                                title: 'Cancelled',\n                                                text: 'Your imaginary file is safe :)',\n                                                icon: 'error',\n                                                confirmButtonColor: '#4a4fea',\n                                            });\n                                        }\n                                    })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A message with custom Image Header</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-image\"\n                            onClick={() =>\n                                swal.fire({\n                                    title: 'Admin to',\n                                    text: 'Responsive Bootstrap 5 Admin Dashboard',\n                                    imageUrl: logosm,\n                                    imageHeight: 50,\n                                    confirmButtonColor: '#4a4fea',\n                                    animation: false,\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A message with auto close timer</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"sa-close\"\n                            onClick={() =>\n                                swal\n                                    .fire({\n                                        title: 'Auto close alert!',\n                                        html: 'I will close in <strong></strong> seconds.',\n                                        timer: 2000,\n                                        onBeforeOpen: function () {\n                                            swal.showLoading();\n                                            timerInterval = setInterval(function () {\n                                                swal.getContent().querySelector('strong').textContent =\n                                                    swal.getTimerLeft();\n                                            }, 100);\n                                        },\n                                        onClose: function () {\n                                            clearInterval(timerInterval);\n                                        },\n                                    })\n                                    .then(function (result: { dismiss: any }) {\n                                        if (\n                                            // Read more about handling dismissals\n                                            result.dismiss === swal.DismissReason.timer\n                                        ) {\n                                            console.log('I was closed by the timer');\n                                        }\n                                    })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>Custom HTML description and buttons</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"custom-html-alert\"\n                            onClick={() =>\n                                swal.fire({\n                                    title: '<i>HTML</i> <u>example</u>',\n                                    icon: 'info',\n                                    html:\n                                        'You can use <b>bold text</b>, ' +\n                                        '<a href=\"//coderthemes.com/\">links</a> ' +\n                                        'and other HTML tags',\n                                    showCloseButton: true,\n                                    showCancelButton: true,\n                                    confirmButtonClass: 'btn btn-confirm',\n                                    cancelButtonClass: 'btn btn-cancel ms-1',\n                                    confirmButtonText: '<i class=\"mdi mdi-thumb-up-outline\"></i> Great!',\n                                    cancelButtonText: '<i class=\"mdi mdi-thumb-down-outline\"></i>',\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>A message with custom width, padding and background</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"custom-padding-width-alert\"\n                            onClick={() =>\n                                swal.fire({\n                                    title: 'Custom width, padding, background.',\n                                    width: 600,\n                                    padding: 100,\n                                    background:\n                                        '#fff url(//subtlepatterns2015.subtlepatterns.netdna-cdn.com/patterns/geometry.png)',\n                                })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n                <tr>\n                    <td>Ajax request example</td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info btn-xs\"\n                            id=\"ajax-alert\"\n                            onClick={() =>\n                                swal\n                                    .fire({\n                                        title: 'Submit email to run ajax request',\n                                        input: 'email',\n                                        showCancelButton: true,\n                                        confirmButtonText: 'Submit',\n                                        showLoaderOnConfirm: true,\n                                        confirmButtonColor: '#4a4fea',\n                                        cancelButtonColor: '#f34e4e',\n                                        preConfirm: function (email: string) {\n                                            return new Promise<void>(function (resolve, reject) {\n                                                setTimeout(function () {\n                                                    if (email === 'taken@example.com') {\n                                                        reject('This email is already taken.');\n                                                    } else {\n                                                        resolve();\n                                                    }\n                                                }, 2000);\n                                            });\n                                        },\n                                        allowOutsideClick: false,\n                                    })\n                                    .then(function (email: string) {\n                                        swal.fire({\n                                            icon: 'success',\n                                            title: 'Ajax request finished!',\n                                            confirmButtonColor: '#4a4fea',\n                                            html: 'Submitted email: ' + email,\n                                        });\n                                    })\n                            }\n                        >\n                            Click me\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    );\n});\n\nexport default Alerts;\n","import { Row, Col, Card } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport Alerts from './Alerts';\n\nconst SweetAlerts = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Sweet Alerts',\n        breadCrumbItems: [\n            {\n                path: '/extended-ui/sweet-alert',\n                label: 'Extended UI',\n            },\n            {\n                path: '/extended-ui/sweet-alert',\n                label: 'Sweet Alerts',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <Row>\n            <Col>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title\">Examples</h4>\n\n                        <p className=\"sub-header\">\n                            A beautiful, responsive, customizable, accessible (WAI-ARIA) replacement for JavaScript's\n                            popup boxes\n                        </p>\n\n                        <Alerts />\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n    );\n};\n\nexport default SweetAlerts;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["withSwal","props","timerInterval","swal","className","style","width","type","id","onClick","fire","title","text","icon","imageUrl","imageHeight","imageAlt","position","showConfirmButton","timer","footer","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","cancelButtonText","confirmButtonClass","cancelButtonClass","buttonsStyling","dismiss","DismissReason","cancel","logosm","animation","html","onBeforeOpen","showLoading","setInterval","getContent","querySelector","textContent","getTimerLeft","onClose","clearInterval","console","log","showCloseButton","padding","background","input","showLoaderOnConfirm","preConfirm","email","Promise","resolve","reject","setTimeout","allowOutsideClick","usePageTitle","breadCrumbItems","path","label","active","Row","Col","Card","CardImg","React","ref","bsPrefix","variant","as","Component","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","BsComponent","Tag","resolvedPrefix","p"],"sourceRoot":""}