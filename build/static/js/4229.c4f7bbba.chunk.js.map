{"version":3,"file":"static/js/4229.c4f7bbba.chunk.js","mappings":"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","sources":["components/form/FormInput.tsx","components/form/VerticalForm.tsx","pages/apps/Chat/data.ts","pages/apps/Chat/ChatUsers.tsx","components/Loader.tsx","pages/apps/Chat/ChatArea.tsx","pages/apps/Chat/index.tsx","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/@restart/ui/esm/DataKey.js","../node_modules/@restart/ui/esm/useWindow.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/dom-helpers/esm/ownerDocument.js","../node_modules/dom-helpers/esm/querySelectorAll.js","../node_modules/dom-helpers/esm/removeEventListener.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js"],"sourcesContent":["import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","// types\nimport { ChatMessage, ChatUser } from './types';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\nimport avatar2 from '../../../assets/images/users/user-2.jpg';\nimport avatar3 from '../../../assets/images/users/user-3.jpg';\nimport avatar4 from '../../../assets/images/users/user-4.jpg';\nimport avatar5 from '../../../assets/images/users/user-5.jpg';\nimport avatar6 from '../../../assets/images/users/user-6.jpg';\nimport avatar7 from '../../../assets/images/users/user-7.jpg';\n\nconst users: ChatUser[] = [\n    {\n        id: 1,\n        name: 'Margaret Clayton',\n        avatar: avatar2,\n        lastMessage: 'I have finished it! See you so...',\n        lastMessageOn: '05 min',\n        userStatus: 'online',\n    },\n    {\n        id: 2,\n        name: 'Jason Bent',\n        icon: 'mdi mdi-account',\n        variant: 'success',\n        lastMessage: 'Hey! there I am available',\n        lastMessageOn: '20 min',\n        userStatus: 'online',\n    },\n    {\n        id: 3,\n        name: 'Mark Nieto',\n        avatar: avatar3,\n        lastMessage: 'This theme is awesome!',\n        lastMessageOn: '32 min',\n        lastMessageSeen: false,\n        userStatus: 'offline',\n    },\n    {\n        id: 4,\n        name: 'Garret Sauer',\n        avatar: avatar4,\n        lastMessage: 'Nice to meet you',\n        lastMessageOn: '01 hr',\n        lastMessageSeen: false,\n        userStatus: 'online',\n    },\n    {\n        id: 5,\n        name: 'Michael James',\n        avatar: avatar5,\n        lastMessage: 'Good morning',\n        lastMessageOn: '01 hr',\n        userStatus: 'offline',\n    },\n    {\n        id: 6,\n        name: 'Felicia Johnson',\n        icon: 'mdi mdi-account',\n        variant: 'primary',\n        lastMessage: 'Meeting 10am',\n        lastMessageOn: '02 hr',\n        lastMessageSeen: false,\n        userStatus: 'offline',\n    },\n    {\n        id: 7,\n        name: 'Tracy Marsh',\n        avatar: avatar6,\n        lastMessage: 'Hey! there I am available',\n        lastMessageOn: '04 hr',\n        userStatus: 'online',\n    },\n    {\n        id: 8,\n        name: 'Richard Lopez',\n        avatar: avatar7,\n        lastMessage: 'Nice to meet you',\n        lastMessageOn: '05 hr',\n        userStatus: 'offline',\n    },\n];\n\nconst messages: ChatMessage[] = [];\n\nconst defaultTo = {\n    id: 9,\n    name: 'Geneva M',\n    avatar: avatar1,\n};\n\nfor (const user of users) {\n    messages.push(\n        {\n            id: 1,\n            message: 'Hello!',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:00',\n        },\n        {\n            id: 2,\n            message: 'Hi, How are you? What about our next meeting?',\n            to: user,\n            from: defaultTo,\n            sendOn: '10:01',\n        },\n        {\n            id: 3,\n            message: 'Yeah everything is fine',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 4,\n            message: '& Next meeting tomorrow 10.00AM',\n            to: defaultTo,\n            from: user,\n            sendOn: '10:03',\n        },\n        {\n            id: 5,\n            message: 'Wow thats great',\n            to: user,\n            from: defaultTo,\n            sendOn: '10:04',\n        }\n    );\n}\n\nexport { users, messages };\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Dropdown } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\n\n// types\nimport { ChatUser } from './types';\n\n// dummy data\nimport { users } from './data';\n\n// images\nimport profilePic from '../../../assets/images/users/user-1.jpg';\nimport classNames from 'classnames';\n\ntype ChatUsersProps = {\n    onUserSelect: (value: ChatUser) => void;\n};\n\n// ChatUsers\nconst ChatUsers = ({ onUserSelect }: ChatUsersProps) => {\n    const [user, setUser] = useState<ChatUser[]>([...users]);\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n    // Search the user\n    // @param {*} text\n    const search = (text: string) => {\n        setUser(text ? [...users].filter((u) => u.name!.toLowerCase().indexOf(text.toLowerCase()) >= 0) : [...users]);\n    };\n\n    // Activates the user\n    // @param {*} user\n    const activateUser = (user: ChatUser) => {\n        setSelectedUser(user);\n        if (onUserSelect) {\n            onUserSelect(user);\n        }\n    };\n\n    return (\n        <>\n            <Card className=\"chat-list-card mb-xl-0\">\n                <Card.Body>\n                    <Dropdown className=\"float-end\" align=\"end\">\n                        <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                            <i className=\"mdi mdi-dots-vertical\"></i>\n                        </Dropdown.Toggle>\n                        <Dropdown.Menu>\n                            <Dropdown.Item>Action</Dropdown.Item>\n                            <Dropdown.Item>Anothther Action</Dropdown.Item>\n                            <Dropdown.Item>Something Else</Dropdown.Item>\n                            <Dropdown.Item>Separated link</Dropdown.Item>\n                        </Dropdown.Menu>\n                    </Dropdown>\n\n                    <div className=\"d-flex\">\n                        <div className=\"flex-shrink-0\">\n                            <img src={profilePic} className=\"rounded-circle avatar-sm\" alt=\"\" />\n                        </div>\n                        <div className=\"flex-grow-1 align-items-center ms-2\">\n                            <h5 className=\"mt-0 mb-1\">\n                                <Link to=\"/\" className=\"text-reset\">\n                                    Nowak Helme\n                                </Link>\n                            </h5>\n                            <p className=\"font-13 text-muted mb-0\">Admin Head</p>\n                        </div>\n                    </div>\n\n                    <hr className=\"my-3\" />\n\n                    <form className=\"search-box chat-search-box\">\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Search...\"\n                            onKeyUp={(e: any) => search(e.target.value)}\n                        />\n                        <span className=\"mdi mdi-magnify search-icon\"></span>\n                    </form>\n\n                    <hr className=\"my-3\" />\n\n                    <ul className=\"list-unstyled chat-list mb-0\">\n                        <SimpleBar style={{ height: '410px', width: '100%' }}>\n                            {(user || []).map((user, index) => {\n                                return (\n                                    <li\n                                        key={index.toString()}\n                                        className={classnames({\n                                            active: user.id === selectedUser.id,\n                                            unread: user.lastMessageSeen === false,\n                                        })}\n                                    >\n                                        <Link\n                                            to=\"#\"\n                                            onClick={(e: any) => {\n                                                activateUser(user);\n                                            }}\n                                        >\n                                            <div className=\"d-flex\">\n                                                {user.avatar ? (\n                                                    <div\n                                                        className={classNames(\n                                                            'flex-shrink-0',\n                                                            'chat-user-img',\n                                                            'align-self-center',\n                                                            'me-2',\n                                                            user.userStatus === 'online' && 'active'\n                                                        )}\n                                                    >\n                                                        <img\n                                                            src={user.avatar}\n                                                            className=\"rounded-circle avatar-sm\"\n                                                            alt=\"\"\n                                                        />\n                                                    </div>\n                                                ) : (\n                                                    <div\n                                                        className={classNames(\n                                                            'flex-shrink-0',\n                                                            'chat-user-img',\n                                                            'avatar-sm',\n                                                            'align-self-center',\n                                                            'me-2',\n                                                            user.userStatus === 'online' && 'active'\n                                                        )}\n                                                    >\n                                                        <span\n                                                            className={classnames(\n                                                                'avatar-title',\n                                                                'rounded-circle',\n                                                                'bg-soft-' + user.variant,\n                                                                'text-' + user.variant\n                                                            )}\n                                                        >\n                                                            <i className={classNames(user.icon)}></i>\n                                                        </span>\n                                                    </div>\n                                                )}\n                                                <div className=\"flex-grow-1 overflow-hidden\">\n                                                    <h5 className=\"text-truncate font-14 mt-0 mb-1\">{user.name}</h5>\n                                                    <p className=\"text-truncate mb-0\">{user.lastMessage}</p>\n                                                </div>\n                                                <div className=\"font-11\">{user.lastMessageOn}</div>\n                                            </div>\n                                        </Link>\n                                    </li>\n                                );\n                            })}\n                        </SimpleBar>\n                    </ul>\n                </Card.Body>\n            </Card>\n        </>\n    );\n};\n\nexport default ChatUsers;\n","const Loader = () => {\n    return (\n        <div className=\"preloader\" id=\"preloader\">\n            <div className=\"status\" id=\"status\">\n                <div className=\"spinner\">\n                    <div></div>\n                    <div></div>\n                    <div></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Card, Dropdown, Row, Col } from 'react-bootstrap';\nimport classnames from 'classnames';\nimport SimpleBar from 'simplebar-react';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// components\nimport { FormInput } from '../../../components/form';\nimport Loader from '../../../components/Loader';\n\n// types\nimport { ChatMessage, ChatUser } from './types';\n\n// dummy data\nimport { messages } from './data';\n\n// images\nimport avatar1 from '../../../assets/images/users/user-1.jpg';\n\nconst UserMessage = ({ message, toUser }: { message: ChatMessage; toUser: ChatUser }) => {\n    return (\n        <li className={classnames('clearfix', { odd: message.from.id === toUser.id })}>\n            <div className=\"message-list\">\n                {message.from.avatar ? (\n                    <div className=\"chat-avatar\">\n                        <img src={message.from.avatar} alt=\"\" />\n                    </div>\n                ) : (\n                    <div className=\"chat-avatar\">\n                        <span\n                            className={classnames(\n                                'd-flex',\n                                'align-items-center',\n                                'justify-content-center',\n                                'avatar-sm',\n                                'rounded-circle',\n                                'bg-soft-' + message.from.variant,\n                                'text-' + message.from.variant\n                            )}\n                        >\n                            <i className={classnames(message.from.icon)}></i>\n                        </span>\n                    </div>\n                )}\n\n                <div className=\"conversation-text\">\n                    <div className=\"ctext-wrap\">\n                        <i>{message.from.name}</i>\n                        <p>{message.message}</p>\n                    </div>\n                    <span className=\"time\">{message.sendOn}</span>\n                </div>\n            </div>\n        </li>\n    );\n};\n\ntype ChatAreaProps = {\n    selectedUser: ChatUser;\n};\n\n// ChatArea\nconst ChatArea = ({ selectedUser }: ChatAreaProps) => {\n    const [loading, setLoading] = useState<boolean>(false);\n\n    const [userMessages, setUserMessages] = useState<ChatMessage[]>([]);\n    const [toUser] = useState<ChatUser>({\n        id: 9,\n        name: 'Geneva M',\n        avatar: avatar1,\n    });\n\n    // Fetches the messages for selected user\n    const getMessagesForUser = useCallback(() => {\n        if (selectedUser) {\n            setLoading(true);\n            setTimeout(() => {\n                setUserMessages(\n                    [...messages].filter(\n                        (m) =>\n                            (m.to.id === toUser.id && m.from.id === selectedUser.id) ||\n                            (toUser.id === m.from.id && m.to.id === selectedUser.id)\n                    )\n                );\n                setLoading(false);\n            }, 750);\n        }\n    }, [selectedUser, toUser]);\n\n    useEffect(() => {\n        getMessagesForUser();\n    }, [getMessagesForUser]);\n\n    // form validation schema\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            newMessage: yup.string().required('Please enter your messsage'),\n        })\n    );\n\n    // form methods\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n        reset,\n    } = methods;\n\n    // sends the chat message\n    const sendChatMessage = (data: { [x: string]: string }) => {\n        let newUserMessages = [...userMessages];\n        newUserMessages.push({\n            id: userMessages.length + 1,\n            from: toUser,\n            to: selectedUser,\n            message: data['newMessage'],\n            sendOn: new Date().getHours() + ':' + new Date().getMinutes(),\n        });\n        setUserMessages(newUserMessages);\n        reset();\n    };\n\n    return (\n        <Card className=\"conversation-list-card\">\n            <Card.Body>\n                <Dropdown className=\"float-end\" align=\"end\">\n                    <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                        <i className=\"mdi mdi-dots-vertical\"></i>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu>\n                        <Dropdown.Item>Action</Dropdown.Item>\n                        <Dropdown.Item>Anothther Action</Dropdown.Item>\n                        <Dropdown.Item>Something Else</Dropdown.Item>\n                        <Dropdown.Divider />\n                        <Dropdown.Item>Separated link</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n\n                <div className=\"d-flex\">\n                    <div className=\"flex-grow-1\">\n                        <h5 className=\"mt-0 mb-1 text-truncate\">{selectedUser.name}</h5>\n                        <p className=\"font-13 text-muted mb-0\">\n                            <i className=\"mdi mdi-circle text-success me-1 font-11\"></i>\n                            Active\n                        </p>\n                    </div>\n                </div>\n\n                <hr className=\"my-3\" />\n\n                {loading && <Loader />}\n                <SimpleBar style={{ height: '410px', width: '100%' }}>\n                    <ul className=\"conversation-list\">\n                        <li>\n                            <div className=\"chat-day-title\">\n                                <span className=\"title\">Today</span>\n                            </div>\n                        </li>\n                        {(userMessages || []).map((message, index) => {\n                            return <UserMessage key={index.toString()} message={message} toUser={toUser} />;\n                        })}\n                    </ul>\n                </SimpleBar>\n            </Card.Body>\n            <div className=\"p-3 conversation-input border-top\">\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(sendChatMessage)}>\n                    <Row>\n                        <Col>\n                            <FormInput\n                                type=\"text\"\n                                name=\"newMessage\"\n                                placeholder=\"Enter Message...\"\n                                register={register}\n                                key=\"newMessage\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                        <Col xs=\"auto\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary chat-send width-md waves-effect waves-light\"\n                            >\n                                <span className=\"d-none d-sm-inline-block me-2\">Send</span>\n                                <i className=\"mdi mdi-send\"></i>\n                            </button>\n                        </Col>\n                    </Row>\n                </form>\n            </div>\n        </Card>\n    );\n};\n\nexport default ChatArea;\n","import { useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport ChatUsers from './ChatUsers';\nimport ChatArea from './ChatArea';\n\n// types\nimport { ChatUser } from './types';\n\n// dummy data\nimport { users } from './data';\n\nconst ChatApp = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Chat',\n        breadCrumbItems: [\n            {\n                path: '/apps/chat',\n                label: 'Apps',\n            },\n            {\n                path: '/apps/chat',\n                label: 'Chat',\n                active: true,\n            },\n        ],\n    });\n\n    const [selectedUser, setSelectedUser] = useState<ChatUser>(users[1]);\n\n    // On user change\n    const onUserChange = (user: ChatUser) => {\n        setSelectedUser(user);\n    };\n\n    return (\n        <Row>\n            <Col xl={3} lg={4}>\n                <ChatUsers onUserSelect={onUserChange} />\n            </Col>\n            <Col xl={9} lg={8}>\n                <ChatArea selectedUser={selectedUser} />\n            </Col>\n        </Row>\n    );\n};\n\nexport default ChatApp;\n","import { useMemo } from 'react';\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nexport function mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\nfunction useMergedRefs(refA, refB) {\n  return useMemo(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nexport default useMergedRefs;","export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexport const PROPERTY_PREFIX = `rrUi`;\nexport function dataAttr(property) {\n  return `${ATTRIBUTE_PREFIX}${property}`;\n}\nexport function dataProp(property) {\n  return `${PROPERTY_PREFIX}${property}`;\n}","import { createContext, useContext } from 'react';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\nexport const WindowProvider = Context.Provider;\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */\n\nexport default function useWindow() {\n  return useContext(Context);\n}","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;"],"names":["PasswordInput","name","placeholder","refCallback","errors","register","control","className","otherProps","useState","showPassword","setShowPassword","type","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","children","labelClassName","containerClass","action","hasEndIcon","undefined","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","formState","noValidate","Array","isArray","map","child","props","React","key","users","avatar","lastMessage","lastMessageOn","userStatus","icon","variant","lastMessageSeen","messages","defaultTo","avatar1","user","push","message","to","from","sendOn","onUserSelect","setUser","selectedUser","setSelectedUser","Card","Dropdown","align","src","profilePic","alt","onKeyUp","e","text","target","value","filter","u","toLowerCase","indexOf","style","height","width","index","classnames","active","unread","activateUser","toString","UserMessage","toUser","odd","loading","setLoading","userMessages","setUserMessages","getMessagesForUser","useCallback","setTimeout","m","useEffect","schemaResolver","yupResolver","yup","shape","newMessage","required","reset","data","newUserMessages","length","Date","getHours","getMinutes","Row","Col","xs","usePageTitle","title","breadCrumbItems","path","xl","lg","toFnRef","current","refA","refB","useMemo","a","b","mergeRefs","dataAttr","property","dataProp","Context","createContext","canUseDOM","window","Provider","useWindow","useContext","optionsSupported","onceSupported","options","passive","once","addEventListener","removeEventListener","node","eventName","handler","capture","wrappedHandler","__once","onceHandler","event","this","call","document","createElement","ownerDocument","toArray","Function","prototype","bind","slice","qsa","element","selector","querySelectorAll","CardImg","bsPrefix","Component","prefix","useBootstrapPrefix","_jsx","displayName","CardHeader","contextValue","cardHeaderBsPrefix","CardHeaderContext","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","bg","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context"],"sourceRoot":""}