{"version":3,"file":"static/js/4891.5cccbc12.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/react-table/src/publicUtils.js","../node_modules/react-table/src/utils.js","../node_modules/react-table/src/makeDefaultPluginHooks.js","../node_modules/react-table/src/hooks/useColumnVisibility.js","../node_modules/react-table/src/hooks/useTable.js","../node_modules/react-table/src/plugin-hooks/useExpanded.js","../node_modules/react-table/src/filterTypes.js","../node_modules/react-table/src/plugin-hooks/useFilters.js","../node_modules/react-table/src/plugin-hooks/useGlobalFilter.js","../node_modules/react-table/src/aggregations.js","../node_modules/react-table/src/plugin-hooks/useGroupBy.js","../node_modules/react-table/src/sortTypes.js","../node_modules/react-table/src/plugin-hooks/useSortBy.js","../node_modules/react-table/src/plugin-hooks/usePagination.js","../node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../node_modules/react-table/src/plugin-hooks/useRowSelect.js","../node_modules/react-table/src/plugin-hooks/useRowState.js","../node_modules/react-table/src/plugin-hooks/useColumnOrder.js","../node_modules/react-table/src/plugin-hooks/useResizeColumns.js","../node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js","../node_modules/react-table/src/plugin-hooks/useBlockLayout.js","../node_modules/react-table/src/plugin-hooks/useFlexLayout.js","../node_modules/react-table/src/plugin-hooks/useGridLayout.js","../node_modules/react-table/index.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    aggregations[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nexport function datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nexport function string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nexport function number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n","export function useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: `grid`,\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `),\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\n    },\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === `init`) {\n    return {\n      gridLayout: {\n        columnWidths: instance.columns.map(() => `auto`),\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === `columnStartResizing`) {\n    const { columnId } = action\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId)\n    const elWidth = getElementWidth(columnId)\n\n    if (elWidth !== undefined) {\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          columnId,\n          columnIndex,\n          startingWidth: elWidth\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === `columnResizing`) {\n    const {\n      columnIndex,\n      startingWidth,\n      columnWidths,\n    } = state.gridLayout\n\n    const change = state.columnResizing.startX - action.clientX\n    const newWidth = startingWidth - change\n    const columnWidthsCopy = [...columnWidths]\n    columnWidthsCopy[columnIndex] = `${newWidth}px`\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: columnWidthsCopy,\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}","if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/react-table.production.min.js')\n} else {\n  module.exports = require('./dist/react-table.development.js')\n}\n"],"names":["CardImg","React","ref","bsPrefix","className","variant","as","Component","props","prefix","useBootstrapPrefix","_jsx","classNames","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","value","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","actions","init","defaultRenderer","emptyRenderer","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","next","style","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","getPrototypeOf","prototype","isReactComponent","$$typeof","includes","description","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","accessorPath","split","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","String","d","replace","join","reOpenBracket","reCloseBracket","set","cursor","pathPart","e","row","error","decorateColumn","userDefaultColumn","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","addToExpandedRows","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","handleColumn","parentVisible","subColumn","subHeader","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","subHeaders","header","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","expandedDepth","maxDepth","splitId","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","undefined","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","col","g","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","aggregateFn","aggregate","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","resKey","reSplitAlphaNumeric","compareBasic","getRowValuesByColumnID","row1","row2","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","alower","blower","replaceNonNumeric","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","u","columnGroup","PivotHeader","uniqueValue","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","window","addEventListener","err","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","totalColumnsMinWidth","flex","useGridLayout","gridTemplateColumns","gridLayout","w","columnIndex","elWidth","getElementById","offsetWidth","startingWidth","newWidth","columnWidthsCopy","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups","module","exports"],"sourceRoot":""}