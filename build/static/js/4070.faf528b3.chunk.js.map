{"version":3,"file":"static/js/4070.faf528b3.chunk.js","mappings":"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","sources":["components/form/FormInput.tsx","components/form/VerticalForm.tsx","pages/forms/Validation.tsx","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js"],"sourcesContent":["import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import { useState } from 'react';\nimport { Row, Col, Card, Button, InputGroup, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// hooks\nimport { usePageTitle } from '../../hooks';\n\n// components\nimport { FormInput, VerticalForm } from '../../components/form';\n\ntype UserData = {\n    username: string;\n    email: string;\n    password: string;\n    confirmpassword: string;\n    checkbox: boolean;\n};\n\ntype UserData2 = {\n    webSite: string;\n    email2: string;\n    password2: string;\n    confirmpassword2: string;\n    horizontalCheck: boolean;\n};\n\ntype FormData1 = {\n    requiredInput: string;\n    email: string;\n    equalTo1: string;\n    equalTo2: string;\n    url: string;\n    digits: string;\n    numberInput: string;\n    alphaNumeric: string;\n    textAreaInput: string;\n};\n\ntype FormData2 = {\n    minLenInput: string;\n    maxLenInput: string;\n    rangeLenInput: string;\n    minValueInput: string;\n    maxValueInput: string;\n    rangeValueInput: string;\n    regEx: string;\n};\n\nconst NormalFormValidation = () => {\n    const [validated, setValidated] = useState<boolean>(false);\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n    };\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bootstrap Validation - Normal</h4>\n                <p className=\"sub-header\">\n                    Provide valuable, actionable feedback to your users with HTML5 form validation–available in all our\n                    supported browsers.\n                </p>\n\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                        <Form.Label>First name</Form.Label>\n                        <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"validationCustom02\">\n                        <Form.Label>Last name</Form.Label>\n                        <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"validationCustomUsername\">\n                        <Form.Label>Username</Form.Label>\n                        <InputGroup hasValidation>\n                            <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Username\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\">Please choose a username.</Form.Control.Feedback>\n                        </InputGroup>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"validationCustom03\">\n                        <Form.Label>City</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"City\" required />\n                        <Form.Control.Feedback type=\"invalid\">Please provide a valid city.</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"validationCustom04\">\n                        <Form.Label>State</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"State\" required />\n                        <Form.Control.Feedback type=\"invalid\">Please provide a valid state.</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"validationCustom05\">\n                        <Form.Label>Zip</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                        <Form.Control.Feedback type=\"invalid\">Please provide a valid zip.</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\">\n                        <Form.Check\n                            id=\"validation-check\"\n                            required\n                            label=\"Agree to terms and conditions\"\n                            feedback=\"You must agree before submitting.\"\n                        />\n                    </Form.Group>\n                    <Button type=\"submit\">Submit form</Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormValidationWithTooltip = () => {\n    const [validated, setValidated] = useState<boolean>(false);\n\n    /*\n     * handle form submission\n     */\n    const handleSubmit = (event: any) => {\n        const form = event.currentTarget;\n        if (form.checkValidity() === false) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        setValidated(true);\n    };\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Bootstrap Validation (Tooltips)</h4>\n                <p className=\"sub-header\">\n                    If your form layout allows it, you can swap the <code>.valid | invalid-feedback</code> classes for{' '}\n                    <code>.valid | invalid-tooltip</code> classes to display validation feedback in a styled tooltip.\n                </p>\n                <Form noValidate validated={validated} onSubmit={handleSubmit}>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip01\">\n                        <Form.Label>First name</Form.Label>\n                        <Form.Control required type=\"text\" placeholder=\"First name\" defaultValue=\"Mark\" />\n                        <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip02\">\n                        <Form.Label>Last name</Form.Label>\n                        <Form.Control required type=\"text\" placeholder=\"Last name\" defaultValue=\"Otto\" />\n                        <Form.Control.Feedback tooltip>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationCustonTooltipme\">\n                        <Form.Label>Username</Form.Label>\n                        <InputGroup hasValidation>\n                            <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Username\"\n                                aria-describedby=\"inputGroupPrepend\"\n                                required\n                            />\n                            <Form.Control.Feedback type=\"invalid\" tooltip>\n                                Please choose a username.\n                            </Form.Control.Feedback>\n                        </InputGroup>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip03\">\n                        <Form.Label>City</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"City\" required />\n                        <Form.Control.Feedback type=\"invalid\" tooltip>\n                            Please provide a valid city.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip04\">\n                        <Form.Label>State</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"State\" required />\n                        <Form.Control.Feedback type=\"invalid\" tooltip>\n                            Please provide a valid state.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"position-relative mb-3\" controlId=\"validationTooltip05\">\n                        <Form.Label>Zip</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Zip\" required />\n                        <Form.Control.Feedback type=\"invalid\" tooltip>\n                            Please provide a valid zip.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Button type=\"submit\">Submit form</Button>\n                </Form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst BasicForm = () => {\n    /*\n    form validation schema\n    */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            username: yup.string().required('Please enter Username'),\n            email: yup.string().required('Please enter Email address'),\n            password: yup.string().required('Please enter Password'),\n            confirmpassword: yup\n                .string()\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\n                .required('This value is required.'),\n            checkbox: yup.bool().oneOf([true], 'Must accept Terms and Conditions'),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Basic Form</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <VerticalForm<UserData>\n                    onSubmit={() => {}}\n                    resolver={schemaResolver}\n                    defaultValues={{ username: 'test' }}\n                >\n                    <FormInput\n                        label={'Username'}\n                        type=\"text\"\n                        name=\"username\"\n                        placeholder=\"Enter your name\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Email address'}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter email\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Password'}\n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"Password\"\n                        endIcon={false}\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Confirm Password'}\n                        type=\"password\"\n                        name=\"confirmpassword\"\n                        placeholder=\"Password\"\n                        endIcon={false}\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput label={'Remember me'} type=\"checkbox\" name=\"checkbox\" containerClass={'mb-2'} />\n\n                    <div className=\"text-md-end mb-0\">\n                        <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n                            Submit\n                        </Button>\n                        <Button variant=\"secondary\" type=\"reset\">\n                            Cancel\n                        </Button>\n                    </div>\n                </VerticalForm>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst HorizontalForm = () => {\n    /*\n    form validation schema\n    */\n    const schemaResolver2 = yupResolver(\n        yup.object().shape({\n            email2: yup.string().required('Please enter Email address'),\n            password2: yup.string().required('Please enter Password'),\n            confirmPassword2: yup\n                .string()\n                .oneOf([yup.ref('password'), null], \"Passwords don't match\")\n                .required('This value is required.'),\n            webSite: yup.string().required('Please enter URL'),\n            horizontalCheck: yup.bool().oneOf([true], 'Must accept Terms and Conditions'),\n        })\n    );\n\n    const methods = useForm<UserData2>({\n        defaultValues: { email2: 'adminto@coderthemes.com' },\n        resolver: schemaResolver2,\n    });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Horizontal Form</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <form name=\"chat-form\" id=\"chat-form\" onSubmit={handleSubmit(() => {})}>\n                    <Form.Group as={Row} className=\"mb-2\">\n                        <Form.Label column md={4}>\n                            Email <span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"email\"\n                                name=\"email2\"\n                                placeholder=\"Email\"\n                                register={register}\n                                key=\"email2\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-2\">\n                        <Form.Label column md={4}>\n                            Password <span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"password\"\n                                name=\"password2\"\n                                placeholder=\"Password\"\n                                register={register}\n                                key=\"password2\"\n                                endIcon={false}\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-2\">\n                        <Form.Label column md={4}>\n                            Confirm Password <span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"password\"\n                                name=\"confirmPassword2\"\n                                placeholder=\"Password\"\n                                register={register}\n                                key=\"confirmPassword2\"\n                                endIcon={false}\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-2\">\n                        <Form.Label column md={4}>\n                            Web Site <span className=\"text-danger\">*</span>\n                        </Form.Label>\n                        <Col md={7}>\n                            <FormInput\n                                type=\"url\"\n                                name=\"webSite\"\n                                placeholder=\"URL\"\n                                register={register}\n                                key=\"webSite\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row} className=\"mb-2\" controlId=\"horizontalCheck\">\n                        <Col md={{ span: 8, offset: 4 }}>\n                            <FormInput\n                                label={'Remember me'}\n                                type=\"checkbox\"\n                                name=\"horizontalCheck\"\n                                register={register}\n                                key=\"horizontalCheck\"\n                                errors={errors}\n                                control={control}\n                            />\n                        </Col>\n                    </Form.Group>\n\n                    <Form.Group as={Row} className=\"mb-2\">\n                        <Col sm={{ span: 8, offset: 4 }}>\n                            <Button variant=\"primary\" className=\"me-1\" type=\"submit\">\n                                Submit\n                            </Button>\n                            <Button variant=\"secondary\" type=\"reset\">\n                                Cancel\n                            </Button>\n                        </Col>\n                    </Form.Group>\n                </form>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst ValidationTypes = () => {\n    /*\n       form validation schema\n       */\n    const schemaResolver3 = yupResolver(\n        yup.object().shape({\n            requiredInput: yup.string().required('This value is required.'),\n            email: yup.string().required('This value is required.').email('This value should be a valid email.'),\n            equalTo1: yup.string().required('This value is required.'),\n            equalTo2: yup\n                .string()\n                .oneOf([yup.ref('equalTo1'), null], 'This value should be the same.')\n                .required('This value is required.'),\n            url: yup.string().required('This value is required.').url('This value should be a valid url.'),\n            digits: yup\n                .number()\n                .typeError('This value should be digits.')\n                .required('This value is required.')\n                .integer('This value should be digits')\n                .positive(),\n            numberInput: yup.number().typeError('This value should be digits.').required('This value is required.'),\n            alphaNumeric: yup\n                .string()\n                .required('This value is required.')\n                .matches(/^[a-zA-Z0-9]+$/, 'This value should be a valid alphanumeric.'),\n            textAreaInput: yup.string().required('This value is required.'),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Validation type</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <VerticalForm<FormData1> onSubmit={() => {}} resolver={schemaResolver3}>\n                    <FormInput\n                        label={'Required'}\n                        type=\"text\"\n                        name=\"requiredInput\"\n                        placeholder=\"Type Something\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Equal To'}\n                        type=\"password\"\n                        name=\"equalTo1\"\n                        placeholder=\"Password\"\n                        endIcon={false}\n                    />\n                    <FormInput\n                        type=\"password\"\n                        name=\"equalTo2\"\n                        placeholder=\"Re-Type Password\"\n                        endIcon={false}\n                        containerClass={'mt-1 mb-2'}\n                    />\n\n                    <FormInput\n                        label={'E-Mail'}\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter a valid e-mail\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput label={'URL'} type=\"url\" name=\"url\" placeholder=\"URL\" containerClass={'mb-2'} />\n                    <FormInput\n                        label={'Digits'}\n                        type=\"text\"\n                        name=\"digits\"\n                        placeholder=\"Enter only digits\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Number'}\n                        type=\"text\"\n                        name=\"numberInput\"\n                        placeholder=\"Enter only numbers\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Alphanumeric'}\n                        type=\"text\"\n                        name=\"alphaNumeric\"\n                        containerClass={'mb-2'}\n                        placeholder=\"Enter alphanumeric value\"\n                    />\n                    <FormInput\n                        label={'Textarea'}\n                        type=\"textarea\"\n                        name=\"textAreaInput\"\n                        containerClass={'mb-2'}\n                        rows={4}\n                    />\n                    <div>\n                        <div>\n                            <Button variant=\"primary\" className=\"waves-effect waves-light me-1\" type=\"submit\">\n                                Submit\n                            </Button>\n                            <Button variant=\"secondary\" type=\"reset\" className=\" waves-effect\">\n                                Cancel\n                            </Button>\n                        </div>\n                    </div>\n                </VerticalForm>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst RangeValidation = () => {\n    /*\n     form validation schema\n     */\n    const schemaResolver4 = yupResolver(\n        yup.object().shape({\n            minLenInput: yup\n                .string()\n                .required('This value is required.')\n                .min(6, 'This value is too short. It should have 6 characters or more.'),\n            maxLenInput: yup\n                .string()\n                .required('This value is required.')\n                .max(6, 'This value is too long. It should have 6 characters or fewer.'),\n            rangeLenInput: yup\n                .string()\n                .min(5, 'This value length is invalid. It should be between 5 and 10 characters long.')\n                .max(10, 'This value length is invalid. It should be between 5 and 10 characters long.')\n                .required('This value is required.'),\n            minValueInput: yup\n                .number()\n                .min(6, 'This value should be greater than or equal to 6.')\n                .required('This value is required.'),\n            maxValueInput: yup\n                .number()\n                .max(6, 'This value should be less than or equal to 6.')\n                .required('This value is required.'),\n            rangeValueInput: yup\n                .number()\n                .min(6, 'This value should be between 6 and 100.')\n                .max(100, 'This value should be between 6 and 100.')\n                .required('This value is required.'),\n            regEx: yup\n                .string()\n                .required('This value is required.')\n                .matches(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'This value seems to be invalid.'),\n        })\n    );\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title mt-0 mb-1\">Range validation</h4>\n                <p className=\"sub-header\">React validation with react-hook-form library.</p>\n                <VerticalForm<FormData2> onSubmit={() => {}} resolver={schemaResolver4}>\n                    <FormInput\n                        label={'Min Length'}\n                        type=\"text\"\n                        name=\"minLenInput\"\n                        placeholder=\"Min 6 chars.\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Max Length'}\n                        type=\"text\"\n                        name=\"maxLenInput\"\n                        placeholder=\"Max 6 chars\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Range Length'}\n                        type=\"text\"\n                        name=\"rangeLenInput\"\n                        placeholder=\"Text between 5 - 10 chars length\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Min Value'}\n                        type=\"text\"\n                        name=\"minValueInput\"\n                        placeholder=\"Min value is 6\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Max Value'}\n                        type=\"text\"\n                        name=\"maxValueInput\"\n                        placeholder=\"Max value is 6\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Range Value'}\n                        type=\"text\"\n                        name=\"rangeValueInput\"\n                        placeholder=\"Number between 6 - 100\"\n                        containerClass={'mb-2'}\n                    />\n                    <FormInput\n                        label={'Regular Exp'}\n                        type=\"text\"\n                        name=\"regEx\"\n                        placeholder=\"Hex. Color\"\n                        containerClass={'mb-2'}\n                    />\n\n                    <div>\n                        <div>\n                            <Button variant=\"primary\" className=\"me-1 waves-effect waves-light\" type=\"submit\">\n                                Submit\n                            </Button>\n                            <Button variant=\"secondary\" type=\"reset\" className=\"waves-effect\">\n                                Cancel\n                            </Button>\n                        </div>\n                    </div>\n                </VerticalForm>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormValidation = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Validation',\n        breadCrumbItems: [\n            {\n                path: '/forms/validation',\n                label: 'Forms',\n            },\n            {\n                path: '/forms/validation',\n                label: 'Validation',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col lg={6}>\n                    <NormalFormValidation />\n                </Col>\n\n                <Col lg={6}>\n                    <FormValidationWithTooltip />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <BasicForm />\n                </Col>\n                <Col lg={6}>\n                    <HorizontalForm />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col lg={6}>\n                    <ValidationTypes />\n                </Col>\n                <Col lg={6}>\n                    <RangeValidation />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default FormValidation;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;"],"names":["PasswordInput","name","placeholder","refCallback","errors","register","control","className","otherProps","useState","showPassword","setShowPassword","type","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","children","labelClassName","containerClass","action","hasEndIcon","undefined","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","formState","noValidate","Array","isArray","map","child","props","React","key","NormalFormValidation","validated","setValidated","event","currentTarget","checkValidity","preventDefault","stopPropagation","controlId","required","defaultValue","hasValidation","feedback","FormValidationWithTooltip","tooltip","BasicForm","schemaResolver","yupResolver","yup","shape","username","email","password","confirmpassword","oneOf","checkbox","variant","HorizontalForm","schemaResolver2","email2","password2","confirmPassword2","webSite","horizontalCheck","Row","column","md","span","offset","sm","ValidationTypes","schemaResolver3","requiredInput","equalTo1","equalTo2","url","digits","typeError","integer","positive","numberInput","alphaNumeric","matches","textAreaInput","RangeValidation","schemaResolver4","minLenInput","min","maxLenInput","max","rangeLenInput","minValueInput","maxValueInput","rangeValueInput","regEx","usePageTitle","title","breadCrumbItems","path","active","lg","CardImg","bsPrefix","Component","prefix","useBootstrapPrefix","_jsx","displayName","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","value","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","Card","bg","text","border","body","defaultProps","Object","assign","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context"],"sourceRoot":""}