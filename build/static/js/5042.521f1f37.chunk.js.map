{"version":3,"file":"static/js/5042.521f1f37.chunk.js","mappings":"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","sources":["components/StatisticsWidget3.tsx","helpers/api/inspection.ts","pages/appraisal/certs/certDetail.tsx","../node_modules/react-simple-image-viewer/node_modules/style-inject/dist/style-inject.es.js","../node_modules/react-simple-image-viewer/src/ReactSimpleImageViewer.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport { Card } from 'react-bootstrap';\n\ntype StatisticsWidget3Props = {\n    variant: string;\n    avatar: string;\n    name: string;\n    emailId: string;\n    position: string;\n};\n\nconst StatisticsWidget3 = ({ variant, avatar, name, emailId, position }: StatisticsWidget3Props) => {\n    return (\n        <Card>\n            <Card.Body className=\"widget-user\" style={{padding: \"10px\"}}>\n                <div className=\"d-flex align-items-center\">\n                    <div className=\"flex-shrink-0 avatar-lg me-3\">\n                        <img src={avatar} className=\"img-fluid rounded-circle\" alt=\"user\" />\n                    </div>\n                    <div className=\"flex-grow-1 overflow-hidden\">\n                        <h5 className=\"mt-0 mb-1\">{name}</h5>\n                        <p className=\"text-muted mb-2 font-13 text-truncate\">{emailId}</p>\n                        <small className={classNames('text-' + variant)}>\n                            <b>{position}</b>\n                        </small>\n                    </div>\n                </div>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default StatisticsWidget3;\n","import { APICore } from './apiCore';\n\nconst api = new APICore();\n\nfunction getInspectionTemplate(params: any) {\n    const baseUrl = '/getInspectionTemplate';\n    return api.get(`${baseUrl}`, params);\n}\n\nfunction startInspection(params: any) {\n    const baseUrl = '/startInspection';\n    return api.create(`${baseUrl}`, params);\n}\n\nfunction endInspection(params: any) {\n    const baseUrl = '/endInspection';\n    return api.create(`${baseUrl}`, params);\n}\nfunction saveInspection(params: any) {\n    const baseUrl = '/saveInspection';\n    return api.create(`${baseUrl}`, params);\n}\nfunction getCerts(params: any) {\n    const baseUrl = '/certs';\n    return api.get(`${baseUrl}`, params);\n}\nfunction getCertPDF(params: any) {\n    const baseUrl = '/getCertPDF';\n    return api.create(`${baseUrl}`, params);\n}\n\nfunction cancelCert(params: any) {\n    const baseUrl = '/cert/cancel';\n    return api.create(`${baseUrl}`, params);\n}\n\nfunction validateCert(params: any) {\n    const baseUrl = '/cert/validate';\n    return api.create(`${baseUrl}`, params);\n}\nfunction saveCert(params: any) {\n    const baseUrl = '/cert/save';\n    return api.create(`${baseUrl}`, params);\n}\n\nfunction sendCertEmail(params: any) {\n    const baseUrl = '/cert/sendEmail';\n    return api.create(`${baseUrl}`, params);\n}\n\nexport { startInspection,sendCertEmail, endInspection, getInspectionTemplate, saveInspection, getCerts,getCertPDF, cancelCert,saveCert,validateCert };\n","import { Card, Col, Collapse, Form, InputGroup, Row } from 'react-bootstrap';\nimport { usePageTitle, useUser } from '../../../hooks';\nimport { useEffect, useCallback, useState, useRef } from 'react';\nimport Loader2 from '../../../components/Loader2';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { getBrands, getModelsByBrand } from '../../../helpers/api/carApi';\nimport { getAllVehicleTypes, getVehicleFields } from '../../../helpers/api/settings';\nimport { getVehicleByVin, saveImage } from '../../../helpers/api/reception';\nimport swal from 'sweetalert2';\nimport { getAppraisalDetail } from '../../../helpers/api/appraisal';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport ImageViewer from 'react-simple-image-viewer';\nimport { cancelCert, getCertPDF, getCerts, getInspectionTemplate, saveCert, sendCertEmail, validateCert } from '../../../helpers/api/inspection';\nimport Evaluate from '../appraisal/ecaluate';\nimport SignatureCanvas from 'react-signature-canvas'\nimport photoIcon from '../../../assets/images/photo.png';\nimport StatisticsWidget3 from '../../../components/StatisticsWidget3';\nimport { FormInput } from '../../../components/form';\n\nconst CertDetail = () => {\n    const params = useParams()\n    const [loading, setLoading] = useState(false);\n    const [isOpenV, setIsOpenV] = useState<boolean>(false);\n    const toggleV = () => setIsOpenV(!isOpenV);\n    const [isOpenI, setIsOpenI] = useState<boolean>(false);\n    const toggleI = () => setIsOpenI(!isOpenI);\n    const [isOpenF, setIsOpenF] = useState<boolean>(false);\n    const toggleF = () => setIsOpenF(!isOpenF);\n    const [isOpenG, setIsOpenG] = useState<boolean>(false);\n    const toggleG = () => setIsOpenG(!isOpenG);\n    const [appraisalData, setAppraisalData] = useState({} as any);\n    const [allVehicleTypes, setAllVehicleTypes] = useState<Array<any>>([])\n    const [vehicleTypeSelected, setVehicleTypeSelected] = useState<any[]>([]);\n    const [brands, setBrands] =  useState<any[]>([]);\n    const [selectedBrand, setSelectedBrand] = useState<any[]>([]);\n    const [models, setModels] =  useState<any[]>([]);\n    const [selectedModel, setSelectedModel] = useState<any[]>([]);\n    const [vehicleFields, setVehicleFields] = useState<any[]>([]);\n    const [templateData, setTemplateData] = useState([] as any);\n    const [loggedInUser] = useUser();\n    const [viewerImages, setViewerImages] = useState([] as any);\n    const [currentImage, setCurrentImage] = useState(0);\n    const [isViewerOpen, setIsViewerOpen] = useState(false);\n    const navigate = useNavigate();\n    const [certData, setCertData] = useState({} as any);\n    const signRef = useRef();\n    const openImageViewer = useCallback((index: any, images: any) => {\n        setViewerImages(images)\n        setCurrentImage(index);\n        setIsViewerOpen(true);\n    }, []);\n  \n    const closeImageViewer = () => {\n      setCurrentImage(0);\n      setIsViewerOpen(false);\n    };\n\n    \n    usePageTitle({\n        title: 'Detalle de inspección para certificado',\n        breadCrumbItems: [\n            {\n                path: '/appraisal/inspection',\n                label: 'Certificado',\n            },\n            {\n                path: '/appraisal/inspection',\n                label: 'Certificado',\n                active: true,\n            },\n        ],\n    });\n\n    const onChangeBrand = (n: any[]) => {\n        if(n.length > 0){\n            setSelectedBrand(n);\n            setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, brand: n[0].Make_Name}})\n            loadModels(n[0].Make_ID);\n            setSelectedModel([]);\n        }else{\n            setSelectedBrand([]);\n        }\n    };\n\n\n    const onChangeModel = (n: any[]) => {\n        if(n.length > 0){\n            setSelectedModel(n);\n            setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, model: n[0].Model_Name}})\n        }else{\n            setSelectedModel([]);\n        }\n    };\n\n    const loadBrands = async () => {\n        let response = await getBrands({})\n        setBrands(response.data.Results)\n    }\n\n    const loadModels = async (brandId:number) => {\n        let response = await getModelsByBrand(brandId)\n        setModels(response.data.Results)\n    }\n\n    const loadFields = async (vehicleTypeId: number) => {\n        let result = await getVehicleFields({vehicleTypeId: vehicleTypeId})\n        setVehicleFields(result.data.data)\n    }\n\n    const onChangeVehicleType = (vehicleTypes: any[]) => {\n        if(vehicleTypes.length > 0){\n            loadFields(vehicleTypes[0].vehicle_type_id)\n            setVehicleTypeSelected(vehicleTypes);\n            setAppraisalData({...appraisalData,vehicle_type: {...appraisalData.vehicle_type, vector: vehicleTypes[0].vector},vehicle: {...appraisalData.vehicle, vehicle_type_id: vehicleTypes[0].vehicle_type_id}})\n        } else {\n            setVehicleTypeSelected([])\n        }\n    };\n\n    const getBase64FromUrl = async (url: any) => {\n        const data = await fetch(url);\n        const blob = await data.blob();\n        return new Promise((resolve) => {\n          const reader = new FileReader();\n          reader.readAsDataURL(blob); \n          reader.onloadend = () => {\n            const base64data = reader.result;   \n            resolve(base64data);\n          }\n        });\n    }\n\n    const loadTemplate = async (id: any) => {\n        setLoading(true)\n        await loadCerts()\n        await loadVehicleTypes()\n        await loadBrands();\n        (signRef.current as any).clear();\n        let result = await getInspectionTemplate({appraisalId: id})\n        if(result.data.meta.code === 200){\n            setTemplateData(result.data.data)\n        }else {\n            swal.fire(\"Error\",result.data.data.error.message,\"error\")\n        }\n\n        let resultAppraisal = await getAppraisalDetail({appraisalId: id})\n        if(resultAppraisal.data.meta.code === 200){\n            onChangeVehicleType([resultAppraisal.data.data.vehicle_type])\n            onChangeBrand([{Make_ID: 99999, Make_Name: resultAppraisal.data.data.vehicle.brand}])\n            onChangeModel([{Model_ID: 99999, Model_Name: resultAppraisal.data.data.vehicle.model}])\n            setAppraisalData(resultAppraisal.data.data)\n            let sign = await getBase64FromUrl(resultAppraisal.data.data.sign_url_2)\n            if(signRef) (signRef.current as any).fromDataURL(sign, { ratio: 1, width: 500, height: 200, xOffset: 0, yOffset: 0 })\n        }\n        setLoading(false)\n    }\n\n    const loadVehicleTypes = async () => {\n        let response = await getAllVehicleTypes({})\n        setAllVehicleTypes(response.data.data.map((vt: any) => {\n            return {...vt, status_color: \"success\"}\n        }))\n    }\n\n\n    useEffect(()=>{\n        loadTemplate(params[\"appraisalId\"])\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[])\n\n    const dataURItoBlob = (dataURI: any) => {\n        // convert base64 to raw binary data held in a string\n        // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n        var byteString = atob(dataURI.split(',')[1]);\n    \n        // separate out the mime component\n        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    \n        // write the bytes of the string to an ArrayBuffer\n        var ab = new ArrayBuffer(byteString.length);\n        var ia = new Uint8Array(ab);\n        for (var i = 0; i < byteString.length; i++) {\n            ia[i] = byteString.charCodeAt(i);\n        }\n    \n        //Old Code\n        //write the ArrayBuffer to a blob, and you're done\n        //var bb = new BlobBuilder();\n        //bb.append(ab);\n        //return bb.getBlob(mimeString);\n    \n        //New Code\n        return new Blob([ab], {type: mimeString});\n    \n    \n    }\n\n    const loadCerts = async () => {\n        let response = await getCerts({})\n        setCertData(response.data.data.find((cert: any) => cert.cert_id === parseInt(params[\"id\"] || \"0\")))\n    }\n\n    const isInspector = () => {\n        if(appraisalData.status){\n            if(appraisalData.inspected_for_one === loggedInUser.user_id) return true\n            if(appraisalData.inspected_for_two === loggedInUser.user_id) return true\n        }\n        return false\n    }\n\n    const cancel = async () => {\n        swal.fire({\n            title: '¿Estas seguro de anular el certificado?',\n            text: \"\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#28bb4b',\n            cancelButtonColor: '#f34e4e',\n            confirmButtonText: 'Si, Anular!',\n        })\n        .then(async (result) => {\n            if (result.isConfirmed) {\n                setLoading(true)\n                let response: any = await cancelCert({cert_id: params[\"id\"]})\n                setLoading(false)\n                if(response.data.meta.code === 200) {\n                    navigate(\"/appraisal/certs\", { replace: true });\n                }\n                else {\n                    swal.fire(\"Error\",response.data.data.error.message,\"error\")\n                }\n            }\n        })\n    }\n\n    const validate = async () => {\n        swal.fire({\n            title: '¿Estas seguro de validar el certificado?',\n            text: \"\",\n            icon: 'warning',\n            showCancelButton: true,\n            confirmButtonColor: '#28bb4b',\n            cancelButtonColor: '#f34e4e',\n            confirmButtonText: 'Si, Validar!',\n        })\n        .then(async (result) => {\n            if (result.isConfirmed) {\n                setLoading(true)\n                let response: any = await validateCert({cert_id: params[\"id\"]})\n                setLoading(false)\n                if(response.data.meta.code === 200) {\n                    navigate(\"/appraisal/certs\", { replace: true });\n                }\n                else {\n                    swal.fire(\"Error\",response.data.data.error.message,\"error\")\n                }\n            }\n        })\n    }\n    \n    const save = async () => {\n        setLoading(true)\n\n        let b64 = (signRef.current as any).toDataURL()\n        let signUpl = await saveImage({\n            file: dataURItoBlob(b64),\n            description: \"Firma de cliente 2\",\n            name: Date.now() + \".png\"\n        })\n        let result = await saveCert({\n            cert_id: certData.cert_id,\n            purpose: certData.purpose,\n            price: certData.estimated_price,\n            vinDoc: certData.vin_doc,\n            motorDoc: certData.motor_doc,\n            motorVeh: certData.motor_veh,\n            signUrl: signUpl.data.data.url,\n            attachs: appraisalData.attacheds\n        })\n        console.log(result.data)\n        if(result.data.meta.code === 200){\n            loadTemplate(params[\"appraisalId\"])\n        }else {\n            swal.fire(\"Error\",result.data.data.error.message,\"error\")\n        }\n        setLoading(false)\n    }\n    return <>\n        {appraisalData.status && <Row style={{marginTop: \"70px\"}} hidden={appraisalData.status === \"Recepcionado\"}>\n            <h4 className=\"header-title\"> Encargados de la inspección</h4>\n            {\n                appraisalData.inspectors.map((u: any) => {\n                    return <Col xl={4} md={4}>\n                        <StatisticsWidget3\n                            variant=\"warning\"\n                            avatar={u.profile_picture_url}\n                            name={u.name}\n                            emailId={u.email}\n                            position={u.user_type_name}\n                        />\n                    </Col>\n                })\n            }\n        </Row>}\n        <Row>\n            <Col lg={12}>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title\">Datos del certificado</h4>\n                        <Row>\n                            <Col lg={3}>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                    <Form.Label>Precio Final </Form.Label>\n                                    <Form.Control disabled={(certData || {}).status !== \"Borrador\"} value={(certData || {}).estimated_price || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                        setCertData({...certData, estimated_price: e.target.value})\n                                    \n                                    }}/>\n                                </Form.Group>\n                            </Col>\n                            <Col lg={9}>\n                                <FormInput\n                                    label={\"Proposito de certificado\"}\n                                    type=\"select\"\n                                    name=\"motor_potency\"\n                                    containerClass=\"mb-3\"\n                                    className=\"form-select\"\n                                    key=\"select0\"\n                                    value={(certData || {}).purpose || \"\"}\n                                    onChange={async (e: any)=>{\n                                        setCertData({...certData, purpose: e.target.value})                                       \n                                    }}\n                                >\n                                    <option value=\"0\">Selecciona uno</option>\n                                    <option value=\"VALOR SUGERIDO PARA DISTRIBUIDORA, YA REBAJADOS LOS GASTOS DE REPARACIÓN\">VALOR SUGERIDO PARA DISTRIBUIDORA, YA REBAJADOS LOS GASTOS DE REPARACIÓN</option>\n                                    <option value=\"VALOR SUGERIDO PARA VENTA O COMPRA, YA REBAJADOS LOS GASTOS DE REPARACIÓN\">VALOR SUGERIDO PARA VENTA O COMPRA, YA REBAJADOS LOS GASTOS DE REPARACIÓN</option>\n                                </FormInput>\n                            </Col>\n                            <Col lg={3}>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                    <Form.Label># Vin en documento </Form.Label>\n                                    <Form.Control disabled={(certData || {}).status !== \"Borrador\"} value={(certData || {}).vin_doc || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                        setCertData({...certData, vin_doc: e.target.value})\n                                    \n                                    }}/>\n                                </Form.Group>\n                            </Col>\n                            <Col lg={3}>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                    <Form.Label># Motor en documento </Form.Label>\n                                    <Form.Control disabled={(certData || {}).status !== \"Borrador\"} value={(certData || {}).motor_doc || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                        setCertData({...certData, motor_doc: e.target.value})\n                                    \n                                    }}/>\n                                </Form.Group>\n                            </Col>\n                            <Col lg={3}>\n                                <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                    <Form.Label># Motor en vehiculo </Form.Label>\n                                    <Form.Control disabled={(certData || {}).status !== \"Borrador\"} value={(certData || {}).motor_veh || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                        setCertData({...certData, motor_veh: e.target.value})\n                                    \n                                    }}/>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        <Row>\n            <Col lg={12}>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title\" onClick={toggleG}> <i className={ isOpenG ? \"mdi mdi-chevron-down me-1\" : \"mdi mdi-chevron-right me-1\"}></i> Fotos para el certificado</h4>\n                        <Collapse in={isOpenG}>\n                            <div>\n                                <Row>\n                                    {\n                                      appraisalData.attacheds && appraisalData.attacheds.map((att: any,key: any) => {\n                                        return <Col lg={4}>\n                                            <div className=\"img-container\">    \n                                                <div className=\"check-icon\">\n                                                    <i className={ att.selected ? \"mdi mdi-check-circle-outline\":\"mdi mdi-checkbox-blank-circle-outline\"}></i>\n                                                </div>\n                                                <img\n                                                className='avatar rounded'\n                                                src={ att.url }\n                                                onClick={ () => { \n                                                    let copyTemplate = {...appraisalData}\n                                                    copyTemplate.attacheds[key] = {...att,selected: !att.selected}\n                                                    setAppraisalData(copyTemplate)\n                                                } }\n                                                width=\"100%\"\n                                                height=\"300px\"\n                                                key={att.attached_id}\n                                                style={{ margin: '2px' }}\n                                                alt={att.description}\n                                                />\n                                            </div>  \n                                        </Col>\n                                      })\n                                    }\n                                    \n                                </Row>\n                            </div>\n                        </Collapse>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n         <Row style={{marginTop: appraisalData.status === \"Recepcionado\" ? \"70px\":\"0px\"}}>\n            <Col lg={12}>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title\" onClick={toggleV}> <i className={ isOpenV ? \"mdi mdi-chevron-down me-1\" : \"mdi mdi-chevron-right me-1\"}></i> Informacion del vehiculo</h4>\n                        <Collapse in={isOpenV}>\n                            <div>\n                                <Row>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Tipo de vehiculo</Form.Label>\n                                            <Typeahead\n                                                id=\"vehicleType\"\n                                                labelKey={'name'}\n                                                multiple={false}\n                                                maxResults={4}\n                                                onChange={onChangeVehicleType}\n                                                options={allVehicleTypes}\n                                                placeholder=\"Escoge un tipo de vehiculo\"\n                                                selected={vehicleTypeSelected}\n                                                disabled={appraisalData.status !== \"En inspección\" || !isInspector()}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>{(appraisalData.vehicle || {}).miles_type === \"miles\" ? \"Millaje\": \"Kilometraje\"}</Form.Label>\n                                            <InputGroup className=\"mb-2\">\n                                                <InputGroup.Text onClick={() => {\n                                                    if(appraisalData.status === \"En inspección\" && isInspector()){\n                                                        setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, miles_type: (appraisalData.vehicle || {}).miles_type === \"miles\" ? \"km\": \"miles\"}})\n                                                    }\n                                                }}>{(appraisalData.vehicle || {}).miles_type === \"miles\" ? \"Mi\": \"Km\"}</InputGroup.Text>\n                                                <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(appraisalData.vehicle || {}).miles || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                    setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, miles: e.target.value}})\n                                                \n                                                }}/>\n                                            </InputGroup>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Placa</Form.Label>\n                                            <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(appraisalData.vehicle || {}).plate || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, plate: e.target.value}})\n                                            \n                                            }}/>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>VIN</Form.Label>\n                                            <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(appraisalData.vehicle || {}).vin || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, vin: e.target.value}})\n                                            \n                                            }}  onBlur={async (e: any) => {\n\n                                                let result = await getVehicleByVin({vin: appraisalData.vehicle.vin})\n                                                if(result.data.data.vehicle_id){\n                                                    await swal.fire({\n                                                        title: 'Ya existe un vehiculo con esta vin',\n                                                        icon: 'info',\n                                                        showCancelButton: true,\n                                                        confirmButtonColor: '#28bb4b',\n                                                        cancelButtonColor: '#f34e4e',\n                                                        confirmButtonText: 'Entendido',\n                                                    })\n                                                }\n                                            }}/>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Marca</Form.Label>\n                                            <Typeahead\n                                                id=\"brand\"\n                                                labelKey={'Make_Name'}\n                                                multiple={false}\n                                                maxResults={4}\n                                                options={brands}\n                                                allowNew={true}\n                                                onChange={onChangeBrand}\n                                                placeholder=\"Escoge una marca...\"\n                                                selected={selectedBrand}\n                                                disabled={appraisalData.status !== \"En inspección\" || !isInspector()}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Modelo</Form.Label>\n                                            <Typeahead\n                                                id=\"model\"\n                                                labelKey={'Model_Name'}\n                                                multiple={false}\n                                                maxResults={4}\n                                                options={models}\n                                                allowNew={true}\n                                                onChange={onChangeModel}\n                                                selected={selectedModel}\n                                                placeholder=\"Escoge un modelo...\"\n                                                disabled={appraisalData.status !== \"En inspección\" || !isInspector()}\n                                            />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Motor</Form.Label>\n                                            <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(appraisalData.vehicle || {}).motor || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, motor: e.target.value}})\n                                            \n                                            }}/>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Año</Form.Label>\n                                            <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(appraisalData.vehicle || {}).year || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, year: e.target.value}})\n                                            \n                                            }}/>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Rines</Form.Label>\n                                            <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(appraisalData.vehicle || {}).wheels || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, wheels: e.target.value}})\n                                            \n                                            }}/>\n                                        </Form.Group>\n                                    </Col>\n                                    <Col lg={3}>\n                                        <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                            <Form.Label>Equipo de sonido</Form.Label>\n                                            <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(appraisalData.vehicle || {}).eq_sound || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                setAppraisalData({...appraisalData,vehicle: {...appraisalData.vehicle, eq_sound: e.target.value}})\n                                            \n                                            }}/>\n                                        </Form.Group>\n                                    </Col>\n                                    {\n                                        vehicleFields.map((vf: any, key: number) => {\n                                            return <Col lg={3} key={key}>\n                                                <Form.Group className=\"mb-3\" controlId=\"validationCustom01\">\n                                                    <Form.Label>{vf.name}</Form.Label>\n                                                    <Form.Control disabled={appraisalData.status !== \"En inspección\" || !isInspector()} value={(((appraisalData.vehicle || {}).fields || {})[vf.name] || {}).value || \"\"} type=\"text\" onChange={async (e: any)=>{\n                                                        let tempApp = {...appraisalData,vehicle: {...appraisalData.vehicle}}\n                                                        if(tempApp.vehicle.fields[vf.name]){\n                                                            tempApp.vehicle.fields[vf.name].value = e.target.value\n                                                        } else {\n                                                            tempApp.vehicle.fields[vf.name] = {value: e.target.value}\n                                                        }\n                                                        setAppraisalData(tempApp)                                                    \n                                                    }}/>\n                                                </Form.Group>\n                                            </Col>\n                                        })\n                                    }\n                                </Row>\n                            </div>\n                        </Collapse>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        <Row>\n            <Col lg={12}>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title\" onClick={toggleI}> <i className={ isOpenI ? \"mdi mdi-chevron-down me-1\" : \"mdi mdi-chevron-right me-1\"}></i> Inspección mecanica</h4>\n                        <Collapse in={isOpenI}>\n                            <div>\n                                <Row>\n                                    <Col lg={12}>\n                                        <div className=\"inspection-sections\">\n                                            {\n                                                Object.keys(templateData).map(inspectionSection => {\n                                                    return <div className=\"inspection-section\" key={inspectionSection}>\n                                                        <h3>{inspectionSection}</h3>\n                                                        <table className=\"inspection-list col-12 text-center\">\n                                                            <thead>\n                                                                <tr>\n                                                                    <th className='col-3 text-start'>Descripción</th>\n                                                                    <th>Bueno</th>\n                                                                    <th>Dañado</th>\n                                                                    <th>Precio</th>\n                                                                    <th>Notas</th>\n                                                                    <th>Fotos</th>                                                \n                                                                </tr>\n                                                            </thead>\n                                                            <tbody>\n\n                                                                {\n                                                                    templateData[inspectionSection].map((inspectionItem: any, key: any) => {\n                                                                        return <tr key={inspectionSection + key}>\n                                                                            <td className='text-start'>\n                                                                                {inspectionItem.name}\n                                                                            </td>\n                                                                            <td>\n                                                                                <Form.Group className=\"mb-1 ms-2\">\n                                                                                    <Form.Check checked={inspectionItem.good || false} disabled={appraisalData.status !== \"En inspección\" || !isInspector()} type=\"checkbox\" id={\"1\"} name={\"customRadio\"+1} onChange={(e) => {\n                                                                                        let copyTemplate = {...templateData}\n                                                                                        copyTemplate[inspectionSection] = templateData[inspectionSection].map((value2: any, key2: any)=>{\n                                                                                            if(key2 === key) return {...value2, good: e.target.checked, damaged: e.target.checked && value2.damaged ? false : value2.damaged}\n                                                                                            return value2\n                                                                                        })\n                                                                                        setTemplateData(copyTemplate)\n                                                                                    }}/>\n                                                                                </Form.Group>\n                                                                            </td>\n                                                                            <td>\n                                                                                <Form.Group className=\"mb-1 ms-2\">\n                                                                                    <Form.Check checked={inspectionItem.damaged || false} disabled={appraisalData.status !== \"En inspección\" || !isInspector()} type=\"checkbox\" id={\"2\"} name={\"customRadio\"+2} onChange={(e) => {\n                                                                                        let copyTemplate = {...templateData}\n                                                                                        copyTemplate[inspectionSection] = templateData[inspectionSection].map((value2: any, key2: any)=>{\n                                                                                            if(key2 === key) return {...value2, damaged:e.target.checked, good: e.target.checked && value2.good ? false : value2.good}\n                                                                                            return value2\n                                                                                        })\n                                                                                        setTemplateData(copyTemplate)\n                                                                                    }}/>\n                                                                                </Form.Group>\n                                                                            </td>\n                                                                            <td className='col-1'>\n                                                                                <Form.Group>\n                                                                                    <Form.Control value={inspectionItem.price || 0} isInvalid={inspectionItem.damaged && inspectionItem.price <= 0} disabled={appraisalData.status !== \"En inspección\" || !isInspector()} type=\"text\" id={\"3\"} name={\"customRadio\"+3} onChange={(e) => {\n                                                                                        let copyTemplate = {...templateData}\n                                                                                        copyTemplate[inspectionSection] = templateData[inspectionSection].map((value2: any, key2: any)=>{\n                                                                                            if(key2 === key) return {...value2, price: parseFloat(e.target.value)}\n                                                                                            return value2\n                                                                                        })\n                                                                                        setTemplateData(copyTemplate)\n                                                                                    }}/>\n                                                                                </Form.Group>\n                                                                            </td>\n                                                                            <td>\n                                                                                <Form.Group>\n                                                                                    <Form.Control value={inspectionItem.notes || \"\"} isInvalid={inspectionItem.damaged && (inspectionItem.notes === \"\" || !inspectionItem.notes)} disabled={appraisalData.status !== \"En inspección\" || !isInspector()} type=\"text\" id={\"4\"} name={\"customRadio\"+4} onChange={(e) => {\n                                                                                        let copyTemplate = {...templateData}\n                                                                                        copyTemplate[inspectionSection] = templateData[inspectionSection].map((value2: any, key2: any)=>{\n                                                                                            if(key2 === key) return {...value2, notes: e.target.value}\n                                                                                            return value2\n                                                                                        })\n                                                                                        setTemplateData(copyTemplate)\n                                                                                    }}/>\n                                                                                </Form.Group>\n                                                                            </td>\n                                                                            <td className='col-3 display-flex'>\n                                                                                <div className=\"uploadImage\" hidden={appraisalData.status !== \"En inspección\" || !isInspector()}>\n                                                                                    <label htmlFor={\"file-input\"+inspectionSection+\"-\"+key}>\n                                                                                        <img className='avatar-md rounded' src={photoIcon} style={{pointerEvents: \"none\"}} alt=\"\"/>\n                                                                                    </label>\n                                                                                    <input  id={\"file-input\"+inspectionSection+\"-\"+key} type=\"file\" onChange={(e)=>{\n                                                                                        let fileReader = new FileReader();\n                                                                                        fileReader.onload = (e: any) => {\n                                                                                            const { result } = e.target;\n                                                                                            if (result) {\n                                                                                                let copyTemplate = {...templateData}\n                                                                                                copyTemplate[inspectionSection] = templateData[inspectionSection].map((value2: any, key2: any)=>{\n                                                                                                    if(key2 === key) return {...value2, images: (value2.images || []).concat(result)}\n                                                                                                    return value2\n                                                                                                })\n                                                                                                setTemplateData(copyTemplate)\n                                                                                            }\n                                                                                        }\n                                                                                        if(e.target.files && e.target.files.length > 0)\n                                                                                            fileReader.readAsDataURL(e.target.files[0]);\n                                                                                    }}/>\n                                                                                </div>\n                                                                                {(inspectionItem.images || []).map((src: any, index: any) => (\n                                                                                    <img\n                                                                                    className='avatar-md rounded'\n                                                                                    src={ src }\n                                                                                    onClick={ () => openImageViewer(index,inspectionItem.images || []) }\n                                                                                    width=\"300\"\n                                                                                    key={ index }\n                                                                                    style={{ margin: '2px' }}\n                                                                                    alt=\"\"\n                                                                                    />\n                                                                                ))}\n                                                                                {isViewerOpen && (\n                                                                                    <ImageViewer\n                                                                                    src={ viewerImages || [] }\n                                                                                    currentIndex={ currentImage }\n                                                                                    disableScroll={ true }\n                                                                                    closeOnClickOutside={ true }\n                                                                                    onClose={ closeImageViewer }\n                                                                                    />\n                                                                                )}\n                                                                            </td>\n                                                                            \n                                                                        </tr>\n                                                                    })\n                                                                }\n                                                            </tbody>\n                                                        </table>\n                                                    </div>\n                                                })\n                                            }\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </div>\n                        </Collapse>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        <Row>\n            <Col lg={12}>\n                <Card>\n                    <Card.Body>\n                        <h4 className=\"header-title\" onClick={toggleF}> <i className={ isOpenF ? \"mdi mdi-chevron-down me-1\" : \"mdi mdi-chevron-right me-1\"}></i> Inspeccion Fisica</h4>\n                        <Collapse in={isOpenF}>\n                            <div>\n                            {\n                                \n                                appraisalData.appraisal_id && <Evaluate allowPrices={true} allowEdit={appraisalData.status === \"En inspección\" && isInspector()} appraisalId={appraisalData.appraisal_id} status={appraisalData.status} vehicleType={appraisalData.vehicle_type?.vector}/>\n                            }\n                            </div>\n                        </Collapse>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        <Row hidden={appraisalData.status === \"Por recepcionar\"}>\n            <Col lg={12}>\n                <Card>\n                    <Card.Body>\n                        <div className='d-flex justify-content-center align-items-center mb-2'>\n                            <h4 className=\"header-title\">Firma del cliente</h4>\n                            <Link  hidden={certData.status !== \"Borrador\"} to=\"\" className=\"btn btn-blue rounded-pill w-md waves-effect waves-light ms-2\" onClick={async () => {\n                                    (signRef.current as any).clear();\n                                }}>\n                                    <i className=\"mdi mdi-eraser me-1\"></i>\n                                    Limpiar\n                                </Link>\n                        </div>\n                        <div className=' d-flex justify-content-center'>\n                            <SignatureCanvas ref={signRef} penColor={ certData.status !== \"Borrador\" ? 'white' :'black'} canvasProps={{width: 500, height: 200, className: 'sigCanvas d-flex justify-content-center'}} />\n                            \n                        </div>\n                    </Card.Body>\n                </Card>\n            </Col>\n        </Row>\n        <Row className='sticky-buttons'>    \n            <Col>\n                <Link to=\"#\" className=\"btn btn-blue rounded-pill w-md waves-effect waves-light mb-3\" onClick={async () => {\n                    setLoading(true)\n                    let result = await getCertPDF({certId: params[\"id\"]})\n                    console.log(result.data)\n                    const blob = new Blob([dataURItoBlob(result.data.data)], { type: 'application/pdf' });\n                    const fileURL = URL.createObjectURL(blob);\n                    window.open(fileURL, \"blank\")\n                    setLoading(false)\n                }}>\n                    <i className=\"mdi mdi-eye me-1\"></i>\n                    Vista Previa\n                </Link>\n                \n                <Link hidden={(certData || {}).status !== \"Borrador\"} to=\"#\" onClick={()=>{\n                    save()\n                }} className=\"btn btn-blue rounded-pill w-md waves-effect waves-light mb-3 ms-3\">\n                    <i className=\"mdi mdi-content-save me-1\"></i>\n                    Guardar\n                </Link>\n                <Link hidden={(certData || {}).status !== \"Borrador\"} to=\"#\" onClick={()=>{\n                    validate()\n                }} className=\"btn btn-success rounded-pill w-md waves-effect waves-light mb-3 ms-3\">\n                    <i className=\"mdi mdi-check me-1\"></i>\n                    Validar\n                </Link>\n                <Link hidden={(certData || {}).status !== \"Validado\"} to=\"#\" onClick={async ()=>{\n                    setLoading(true)\n                    let result = await sendCertEmail({\n                        certId: certData.cert_id\n                    })\n                    setLoading(false)\n                    if(result.data.meta.code === 200){\n                        swal.fire(\"Correo enviado\",\"Se envio un correo con el certificado\",\"success\")\n                    }else{\n                        swal.fire(\"Error al enviar correo\",result.data.meta.message,\"error\")\n                    }\n                }} className=\"btn btn-blue rounded-pill w-md waves-effect waves-light mb-3 ms-3\">\n                    <i className=\"mdi mdi-email-send me-1\"></i>\n                    Enviar correo\n                </Link>\n                <Link hidden={(certData || {}).status !== \"Validado\"} to=\"#\" onClick={()=>{\n                    cancel()\n                }} className=\"btn btn-danger rounded-pill w-md waves-effect waves-light mb-3 ms-3\">\n                    <i className=\"mdi mdi-close me-1\"></i>\n                    Anular\n                </Link>\n            </Col>\n        </Row>\n        <Loader2  loading={loading}/>\n    </>;\n};\n\nexport default CertDetail;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { CSSProperties, useCallback, useEffect, useState } from \"react\";\nimport styles from \"./styles.module.css\";\n\ninterface IProps {\n  src: string[];\n  currentIndex?: number;\n  backgroundStyle?: CSSProperties;\n  disableScroll?: boolean;\n  closeOnClickOutside?: boolean;\n  onClose?: () => void;\n  closeComponent?: JSX.Element;\n  leftArrowComponent?: JSX.Element;\n  rightArrowComponent?: JSX.Element;\n}\n\nconst ReactSimpleImageViewer = (props: IProps) => {\n  const [currentIndex, setCurrentIndex] = useState(props.currentIndex ?? 0);\n\n  const changeImage = useCallback(\n    (delta: number) => {\n      let nextIndex = (currentIndex + delta) % props.src.length;\n      if (nextIndex < 0) nextIndex = props.src.length - 1;\n      setCurrentIndex(nextIndex);\n    },\n    [currentIndex]\n  );\n\n  const handleClick = useCallback(\n    (event: any) => {\n      if (!event.target || !props.closeOnClickOutside) {\n        return;\n      }\n\n      const checkId = event.target.id === 'ReactSimpleImageViewer';\n      const checkClass = event.target.classList.contains('react-simple-image-viewer__slide');\n\n      if (checkId || checkClass) {\n        event.stopPropagation();\n        props.onClose?.();\n      }\n    },\n    [props.onClose]\n  );\n\n  const handleKeyDown = useCallback(\n    (event: any) => {\n      if (event.key === \"Escape\") {\n        props.onClose?.();\n      }\n\n      if ([\"ArrowLeft\", \"h\"].includes(event.key)) {\n        changeImage(-1);\n      }\n\n      if ([\"ArrowRight\", \"l\"].includes(event.key)) {\n        changeImage(1);\n      }\n    },\n    [props.onClose, changeImage]\n  );\n\n  const handleWheel = useCallback(\n    (event: any) => {\n      if (event.wheelDeltaY > 0) {\n        changeImage(-1);\n      } else {\n        changeImage(1);\n      }\n    },\n    [changeImage]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n\n    if (!props.disableScroll) {\n      document.addEventListener(\"wheel\", handleWheel);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n\n      if (!props.disableScroll) {\n        document.removeEventListener(\"wheel\", handleWheel);\n      }\n    };\n  }, [handleKeyDown, handleWheel]);\n\n  return (\n    <div\n      id=\"ReactSimpleImageViewer\"\n      className={`${styles.wrapper} react-simple-image-viewer__modal`}\n      onKeyDown={handleKeyDown}\n      onClick={handleClick}\n      style={props.backgroundStyle}\n    >\n      <span\n        className={`${styles.close} react-simple-image-viewer__close`}\n        onClick={() => props.onClose?.()}\n      >\n        { props.closeComponent || \"×\" }\n      </span>\n\n      {props.src.length > 1 && (\n        <span\n          className={`${styles.navigation} ${styles.prev} react-simple-image-viewer__previous`}\n          onClick={() => changeImage(-1)}\n        >\n          { props.leftArrowComponent || \"❮\" }\n        </span>\n      )}\n\n      {props.src.length > 1 && (\n        <span\n          className={`${styles.navigation} ${styles.next} react-simple-image-viewer__next`}\n          onClick={() => changeImage(1)}\n        >\n          { props.rightArrowComponent || \"❯\" }\n        </span>\n      )}\n\n      <div\n        className={`${styles.content} react-simple-image-viewer__modal-content`}\n        onClick={handleClick}\n      >\n        <div className={`${styles.slide} react-simple-image-viewer__slide`}>\n          <img className={styles.image} src={props.src[currentIndex]} alt=\"\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReactSimpleImageViewer;\n"],"names":["variant","avatar","name","emailId","position","className","style","padding","src","alt","classNames","api","APICore","getInspectionTemplate","params","get","startInspection","create","endInspection","saveInspection","getCerts","getCertPDF","cancelCert","validateCert","saveCert","sendCertEmail","useParams","useState","loading","setLoading","isOpenV","setIsOpenV","isOpenI","setIsOpenI","isOpenF","setIsOpenF","isOpenG","setIsOpenG","appraisalData","setAppraisalData","allVehicleTypes","setAllVehicleTypes","vehicleTypeSelected","setVehicleTypeSelected","brands","setBrands","selectedBrand","setSelectedBrand","models","setModels","selectedModel","setSelectedModel","vehicleFields","setVehicleFields","templateData","setTemplateData","useUser","loggedInUser","viewerImages","setViewerImages","currentImage","setCurrentImage","isViewerOpen","setIsViewerOpen","navigate","useNavigate","certData","setCertData","signRef","useRef","openImageViewer","useCallback","index","images","closeImageViewer","usePageTitle","title","breadCrumbItems","path","label","active","onChangeBrand","n","length","vehicle","brand","Make_Name","loadModels","Make_ID","onChangeModel","model","Model_Name","loadBrands","getBrands","response","data","Results","brandId","getModelsByBrand","loadFields","vehicleTypeId","getVehicleFields","result","onChangeVehicleType","vehicleTypes","vehicle_type_id","vehicle_type","vector","getBase64FromUrl","url","fetch","blob","Promise","resolve","reader","FileReader","readAsDataURL","onloadend","base64data","loadTemplate","id","loadCerts","loadVehicleTypes","current","clear","appraisalId","meta","code","swal","error","message","getAppraisalDetail","resultAppraisal","Model_ID","sign_url_2","sign","fromDataURL","ratio","width","height","xOffset","yOffset","getAllVehicleTypes","map","vt","status_color","useEffect","dataURItoBlob","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","ia","Uint8Array","i","charCodeAt","Blob","type","find","cert","cert_id","parseInt","isInspector","status","inspected_for_one","user_id","inspected_for_two","cancel","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","isConfirmed","replace","validate","save","b64","toDataURL","saveImage","file","description","Date","now","signUpl","purpose","price","estimated_price","vinDoc","vin_doc","motorDoc","motor_doc","motorVeh","motor_veh","signUrl","attachs","attacheds","console","log","marginTop","hidden","inspectors","u","xl","md","profile_picture_url","email","user_type_name","lg","controlId","disabled","value","onChange","e","target","containerClass","onClick","in","att","key","selected","copyTemplate","margin","attached_id","labelKey","multiple","maxResults","options","placeholder","miles_type","miles","plate","vin","onBlur","getVehicleByVin","vehicle_id","allowNew","motor","year","wheels","eq_sound","vf","fields","tempApp","Object","keys","inspectionSection","inspectionItem","checked","good","value2","key2","damaged","isInvalid","parseFloat","notes","htmlFor","photoIcon","pointerEvents","fileReader","onload","concat","files","currentIndex","disableScroll","closeOnClickOutside","onClose","appraisal_id","allowPrices","allowEdit","vehicleType","to","ref","penColor","canvasProps","certId","fileURL","URL","createObjectURL","window","open","css","insertAt","document","head","getElementsByTagName","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","ReactSimpleImageViewer","props","setCurrentIndex","changeImage","delta","nextIndex","handleClick","event","checkId","checkClass","classList","contains","stopPropagation","handleKeyDown","includes","handleWheel","wheelDeltaY","addEventListener","removeEventListener","styles","onKeyDown","backgroundStyle","closeComponent","leftArrowComponent","rightArrowComponent"],"sourceRoot":""}