{"version":3,"file":"static/js/1241.8237d4ce.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/usePlaceholder.js","../node_modules/react-bootstrap/esm/PlaceholderButton.js","../node_modules/react-bootstrap/esm/Placeholder.js","pages/uikit/Placeholders/BasicPlaceholders.tsx","pages/uikit/Placeholders/PlaceholdersAnimation.tsx","pages/uikit/Placeholders/PlaceholdersConcept.tsx","pages/uikit/Placeholders/PlaceholdersWidth.tsx","pages/uikit/Placeholders/PlaceholdersWithSizes.tsx","pages/uikit/Placeholders/PlaceholdersWithVariants.tsx","pages/uikit/Placeholders/index.tsx","../node_modules/react-bootstrap/esm/Button.js","../node_modules/react-bootstrap/esm/CardImg.js","../node_modules/react-bootstrap/esm/CardHeader.js","../node_modules/react-bootstrap/esm/Card.js","../node_modules/react-bootstrap/esm/CardHeaderContext.js","../node_modules/dom-helpers/esm/camelize.js","../node_modules/react-bootstrap/esm/createWithBsPrefix.js","../node_modules/react-bootstrap/esm/divWithClassName.js"],"sourcesContent":["import classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { useCol } from './Col';\nexport default function usePlaceholder({\n  animation,\n  bg,\n  bsPrefix,\n  size,\n  ...props\n}) {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'placeholder');\n  const [{\n    className,\n    ...colProps\n  }] = useCol(props);\n  return { ...colProps,\n    className: classNames(className, animation ? `${bsPrefix}-${animation}` : bsPrefix, size && `${bsPrefix}-${size}`, bg && `bg-${bg}`)\n  };\n}","import * as React from 'react';\nimport Button from './Button';\nimport usePlaceholder from './usePlaceholder';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst PlaceholderButton = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const placeholderProps = usePlaceholder(props);\n  return /*#__PURE__*/_jsx(Button, { ...placeholderProps,\n    ref: ref,\n    disabled: true,\n    tabIndex: -1\n  });\n});\nPlaceholderButton.displayName = 'PlaceholderButton';\nexport default PlaceholderButton;","import * as React from 'react';\nimport usePlaceholder from './usePlaceholder';\nimport PlaceholderButton from './PlaceholderButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Placeholder = /*#__PURE__*/React.forwardRef(({\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  const placeholderProps = usePlaceholder(props);\n  return /*#__PURE__*/_jsx(Component, { ...placeholderProps,\n    ref: ref\n  });\n});\nPlaceholder.displayName = 'Placeholder';\nexport default Object.assign(Placeholder, {\n  Button: PlaceholderButton\n});","import { Button, Card, Col, Placeholder, Row } from 'react-bootstrap';\n\n// images\nimport img1 from '../../../assets/images/small/img-1.jpg';\nimport img2 from '../../../assets/images/small/img-3.jpg';\n\nconst BasicPlaceholders = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Placeholders</h4>\n                <p className=\"text-muted\">\n                    In the example below, we take a typical card component and recreate it with placeholders applied to\n                    create a “loading card”. Size and proportions are the same between the two.\n                </p>\n\n                <Row>\n                    <Col md={6}>\n                        <Card className=\"border shadow-none\">\n                            <Card.Img variant=\"top\" src={img1} />\n                            <Card.Body>\n                                <Card.Title>Card Title</Card.Title>\n                                <Card.Text>\n                                    Some quick example text to build on the card title and make up the bulk of the\n                                    card's content.\n                                </Card.Text>\n                                <Button>Go somewhere</Button>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                    <Col md={6}>\n                        <Card className=\"border shadow-none mb-0\">\n                            <Card.Img variant=\"top\" src={img2} />\n                            <Card.Body>\n                                <Placeholder as={Card.Title} animation=\"glow\">\n                                    <Placeholder xs={6} />\n                                </Placeholder>\n                                <Placeholder as={Card.Text} animation=\"glow\">\n                                    <Placeholder xs={7} /> <Placeholder xs={4} /> <Placeholder xs={4} />{' '}\n                                    <Placeholder xs={6} /> <Placeholder xs={8} />\n                                </Placeholder>\n                                <Placeholder.Button variant=\"primary\" xs={6} />\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default BasicPlaceholders;\n","import { Card, Placeholder } from 'react-bootstrap';\n\nconst PlaceholdersAnimation = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Animation</h4>\n                <p className=\"text-muted\">\n                    Animate placeholders by setting the prop <code>animation</code> to <code>glow</code> or{' '}\n                    <code>wave</code> to better convey the perception of something being <em>actively</em> loaded.\n                </p>\n\n                <Placeholder as=\"p\" animation=\"glow\">\n                    <Placeholder xs={12} />\n                </Placeholder>\n                <Placeholder as=\"p\" animation=\"wave\" className=\"mb-0\">\n                    <Placeholder xs={12} />\n                </Placeholder>\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PlaceholdersAnimation;\n","import { Card, Placeholder } from 'react-bootstrap';\n\nconst PlaceholdersConcept = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">How it works</h4>\n                <p className=\"text-muted\">\n                    Create placeholders with the <code>Placeholder</code> component and a grid column prop (e.g.,{' '}\n                    <code>xs={6}</code>) to set the <code>width</code>. They can replace the text inside an element or\n                    be added to an existing component via the <code>as</code> prop.\n                </p>\n\n                <p aria-hidden=\"true\">\n                    <Placeholder xs={6} />\n                </p>\n\n                <Placeholder.Button xs={4} aria-hidden=\"true\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PlaceholdersConcept;\n","import { Card, Placeholder } from 'react-bootstrap';\n\nconst PlaceholdersWidth = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Width</h4>\n                <p className=\"text-muted\">\n                    You can change the <code>width</code> through grid column classes, width utilities, or inline\n                    styles.\n                </p>\n                <Placeholder xs={6} />\n                <Placeholder className=\"w-75\" /> <br />\n                <Placeholder style={{ width: '25%' }} />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PlaceholdersWidth;\n","import { Card, Placeholder } from 'react-bootstrap';\n\nconst PlaceholdersWithSizes = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Sizing</h4>\n                <p className=\"text-muted\">\n                    The size of <code>placeholder</code>s are based on the typographic style of the parent element.\n                    Customize them with sizing props: <code>lg</code>, <code>sm</code>, or <code>xs</code>.\n                </p>\n\n                <Placeholder xs={12} size=\"lg\" />\n                <Placeholder xs={12} />\n                <Placeholder xs={12} size=\"sm\" />\n                <Placeholder xs={12} size=\"xs\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PlaceholdersWithSizes;\n","import { Card, Placeholder } from 'react-bootstrap';\n\nconst PlaceholdersWithVariants = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Color</h4>\n                <p className=\"text-muted\">\n                    By default, the <code>placeholder</code> uses <code>currentColor</code>. This can be overriden with\n                    a custom color or utility class.\n                </p>\n\n                <Placeholder xs={12} />\n\n                <Placeholder xs={12} bg=\"primary\" />\n                <Placeholder xs={12} bg=\"secondary\" />\n                <Placeholder xs={12} bg=\"success\" />\n                <Placeholder xs={12} bg=\"danger\" />\n                <Placeholder xs={12} bg=\"warning\" />\n                <Placeholder xs={12} bg=\"info\" />\n                <Placeholder xs={12} bg=\"light\" />\n                <Placeholder xs={12} bg=\"dark\" />\n            </Card.Body>\n        </Card>\n    );\n};\n\nexport default PlaceholdersWithVariants;\n","import { Col, Row } from 'react-bootstrap';\n\n// hooks\nimport { usePageTitle } from '../../../hooks';\n\n// component\nimport BasicPlaceholders from './BasicPlaceholders';\nimport PlaceholdersAnimation from './PlaceholdersAnimation';\nimport PlaceholdersConcept from './PlaceholdersConcept';\nimport PlaceholdersWidth from './PlaceholdersWidth';\nimport PlaceholdersWithSizes from './PlaceholdersWithSizes';\nimport PlaceholdersWithVariants from './PlaceholdersWithVariants';\n\nconst Placeholders = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Placeholders',\n        breadCrumbItems: [\n            {\n                path: '/base-ui/placeholders',\n                label: 'Base UI',\n            },\n            {\n                path: '/base-ui/placeholders',\n                label: 'Placeholders',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <Row>\n            <Col xl={6}>\n                <BasicPlaceholders />\n                <PlaceholdersWidth />\n                <PlaceholdersAnimation />\n            </Col>\n            <Col xl={6}>\n                <PlaceholdersWithVariants />\n                <PlaceholdersConcept />\n                <PlaceholdersWithSizes />\n            </Col>\n        </Row>\n    );\n};\n\nexport default Placeholders;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useButtonProps } from '@restart/ui/Button';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nconst Button = /*#__PURE__*/React.forwardRef(({\n  as,\n  bsPrefix,\n  variant,\n  size,\n  active,\n  className,\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  const [buttonProps, {\n    tagName\n  }] = useButtonProps({\n    tagName: as,\n    ...props\n  });\n  const Component = tagName;\n  return /*#__PURE__*/_jsx(Component, { ...props,\n    ...buttonProps,\n    ref: ref,\n    className: classNames(className, prefix, active && 'active', variant && `${prefix}-${variant}`, size && `${prefix}-${size}`, props.href && props.disabled && 'disabled')\n  });\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardImg = /*#__PURE__*/React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n({\n  bsPrefix,\n  className,\n  variant,\n  as: Component = 'img',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(variant ? `${prefix}-${variant}` : prefix, className),\n    ...props\n  });\n});\nCardImg.displayName = 'CardImg';\nexport default CardImg;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport CardHeaderContext from './CardHeaderContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst CardHeader = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card-header');\n  const contextValue = useMemo(() => ({\n    cardHeaderBsPrefix: prefix\n  }), [prefix]);\n  return /*#__PURE__*/_jsx(CardHeaderContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, prefix)\n    })\n  });\n});\nCardHeader.displayName = 'CardHeader';\nexport default CardHeader;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardImg from './CardImg';\nimport CardHeader from './CardHeader';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DivStyledAsH5 = divWithClassName('h5');\nconst DivStyledAsH6 = divWithClassName('h6');\nconst CardBody = createWithBsPrefix('card-body');\nconst CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nconst CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nconst CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nconst CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nconst CardFooter = createWithBsPrefix('card-footer');\nconst CardImgOverlay = createWithBsPrefix('card-img-overlay');\nconst defaultProps = {\n  body: false\n};\nconst Card = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  bg,\n  text,\n  border,\n  body,\n  children,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'card');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, prefix, bg && `bg-${bg}`, text && `text-${text}`, border && `border-${border}`),\n    children: body ? /*#__PURE__*/_jsx(CardBody, {\n      children: children\n    }) : children\n  });\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nexport default Object.assign(Card, {\n  Img: CardImg,\n  Title: CardTitle,\n  Subtitle: CardSubtitle,\n  Body: CardBody,\n  Link: CardLink,\n  Text: CardText,\n  Header: CardHeader,\n  Footer: CardFooter,\n  ImgOverlay: CardImgOverlay\n});","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'CardHeaderContext';\nexport default context;","var rHyphen = /-(.)/g;\nexport default function camelize(string) {\n  return string.replace(rHyphen, function (_, chr) {\n    return chr.toUpperCase();\n  });\n}","import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...props\n    });\n  });\n  BsComponent.defaultProps = defaultProps;\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","import * as React from 'react';\nimport classNames from 'classnames';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default (className => /*#__PURE__*/React.forwardRef((p, ref) => /*#__PURE__*/_jsx(\"div\", { ...p,\n  ref: ref,\n  className: classNames(p.className, className)\n})));"],"names":["usePlaceholder","animation","bg","bsPrefix","size","props","useBootstrapPrefix","useCol","className","colProps","classNames","PlaceholderButton","React","ref","placeholderProps","_jsx","Button","disabled","tabIndex","displayName","Placeholder","as","Component","Object","assign","Card","Row","Col","md","variant","src","img1","img2","xs","style","width","usePageTitle","title","breadCrumbItems","path","label","active","xl","prefix","useButtonProps","tagName","buttonProps","href","defaultProps","CardImg","CardHeader","contextValue","useMemo","cardHeaderBsPrefix","CardHeaderContext","value","children","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardFooter","CardImgOverlay","text","border","body","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","context","rHyphen","pascalCase","str","toUpperCase","string","replace","_","chr","slice","BsComponent","Tag","resolvedPrefix","p"],"sourceRoot":""}