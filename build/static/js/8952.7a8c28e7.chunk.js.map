{"version":3,"file":"static/js/8952.7a8c28e7.chunk.js","mappings":"uMAgBA,IARkB,SAAH,GAAuE,IAAjEA,EAAS,EAATA,UAAWC,EAAK,EAALA,MAAOC,EAAQ,EAARA,SAAaC,GAAU,YAC1D,OACI,SAAC,KAAS,gBAACH,UAAWA,EAAWC,MAAOA,GAAWE,GAAU,aACxDD,O,0MC8Bb,EAhCoB,SAAH,GAA6E,IAAvEE,EAAgB,EAAhBA,iBAAkBC,EAAU,EAAVA,WAAYC,EAAe,EAAfA,gBACjD,OACI,iCACI,eAAIN,UAAU,mCAAkC,qBAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLC,SAAU,SAACC,GAAC,OAAKN,EAAiBM,EAAEC,OAAOC,QAC3CC,KAAK,cACLD,MAAON,EAAgBQ,gBACvBC,GAAG,kBACHC,QAASX,IAAeC,EAAgBQ,mBAE5C,SAACP,EAAA,cAAgB,CAACU,QAAQ,kBAAiB,iCAG/C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLC,SAAU,SAACC,GAAC,OAAKN,EAAiBM,EAAEC,OAAOC,QAC3CC,KAAK,cACLD,MAAON,EAAgBY,kBACvBH,GAAG,oBACHC,QAASX,IAAeC,EAAgBY,qBAE5C,SAACX,EAAA,cAAgB,CAACU,QAAQ,oBAAmB,sCCM7D,EAhCoB,SAAH,GAAqF,IAA/EE,EAAuB,EAAvBA,wBAAyBC,EAAW,EAAXA,YAAad,EAAe,EAAfA,gBACzD,OACI,iCACI,eAAIN,UAAU,mCAAkC,2BAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAON,EAAgBe,mBACvBZ,SAAU,SAACC,GAAC,OAAKS,EAAwBT,EAAEC,OAAOC,QAClDI,QAASI,IAAgBd,EAAgBe,sBAE7C,SAACd,EAAA,cAAgB,CAACU,QAAQ,cAAa,4BAG3C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,aACHH,MAAON,EAAgBgB,kBACvBb,SAAU,SAACC,GAAC,OAAKS,EAAwBT,EAAEC,OAAOC,QAClDI,QAASI,IAAgBd,EAAgBgB,qBAE7C,SAACf,EAAA,cAAgB,CAACU,QAAQ,cAAa,8BCMvD,EAhCoB,SAAH,GAA6E,IAAvEM,EAAe,EAAfA,gBAAiBC,EAAW,EAAXA,YAAalB,EAAe,EAAfA,gBACjD,OACI,iCACI,eAAIN,UAAU,mCAAkC,oBAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAON,EAAgBmB,mBACvBhB,SAAU,SAACC,GAAC,OAAKa,EAAgBb,EAAEC,OAAOC,QAC1CI,QAASQ,IAAgBlB,EAAgBmB,sBAE7C,SAAClB,EAAA,cAAgB,CAACU,QAAQ,cAAa,uBAG3C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAON,EAAgBoB,mBACvBjB,SAAU,SAACC,GAAC,OAAKa,EAAgBb,EAAEC,OAAOC,QAC1CI,QAASQ,IAAgBlB,EAAgBoB,sBAE7C,SAACnB,EAAA,cAAgB,CAACU,QAAQ,cAAa,0BCMvD,EAhCsB,SAAH,GAAmF,IAA7EU,EAAkB,EAAlBA,mBAAoBC,EAAY,EAAZA,aAActB,EAAe,EAAfA,gBACvD,OACI,iCACI,eAAIN,UAAU,mCAAkC,sDAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,iBACLE,GAAG,cACHH,MAAON,EAAgBuB,oBACvBpB,SAAU,SAACC,GAAC,OAAKiB,EAAmBjB,EAAEC,OAAOC,QAC7CI,QAASY,IAAiBtB,EAAgBuB,uBAE9C,SAACtB,EAAA,cAAgB,CAACU,QAAQ,cAAa,uBAG3C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,iBACLE,GAAG,mBACHH,MAAON,EAAgBwB,yBACvBrB,SAAU,SAACC,GAAC,OAAKiB,EAAmBjB,EAAEC,OAAOC,QAC7CI,QAASY,IAAiBtB,EAAgBwB,4BAE9C,SAACvB,EAAA,cAAgB,CAACU,QAAQ,mBAAkB,+BC8B5D,EAxDyB,SAAH,GAA8F,IAAxFc,EAAsB,EAAtBA,uBAAwBC,EAAgB,EAAhBA,iBAAkB1B,EAAe,EAAfA,gBAClE,OACI,iCACI,eAAIN,UAAU,mCAAkC,iCAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAON,EAAgB2B,yBACvBxB,SAAU,SAACC,GAAC,OAAKqB,EAAuBrB,EAAEC,OAAOC,QACjDI,QAASgB,IAAqB1B,EAAgB2B,4BAElD,SAAC1B,EAAA,cAAgB,CAACU,QAAQ,cAAa,uBAG3C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,aACHH,MAAON,EAAgB4B,wBACvBzB,SAAU,SAACC,GAAC,OAAKqB,EAAuBrB,EAAEC,OAAOC,QACjDI,QAASgB,IAAqB1B,EAAgB4B,2BAElD,SAAC3B,EAAA,cAAgB,CAACU,QAAQ,aAAY,sBAG1C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,cACHH,MAAON,EAAgB6B,yBACvB1B,SAAU,SAACC,GAAC,OAAKqB,EAAuBrB,EAAEC,OAAOC,QACjDI,QAASgB,IAAqB1B,EAAgB6B,4BAElD,SAAC5B,EAAA,cAAgB,CAACU,QAAQ,cAAa,uBAG3C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,QACLE,GAAG,iBACHH,MAAON,EAAgB8B,4BACvB3B,SAAU,SAACC,GAAC,OAAKqB,EAAuBrB,EAAEC,OAAOC,QACjDI,QAASgB,IAAqB1B,EAAgB8B,+BAElD,SAAC7B,EAAA,cAAgB,CAACU,QAAQ,iBAAgB,6BCF1D,EAhDwB,SAAH,GAA4F,IAAtFoB,EAAsB,EAAtBA,uBAAwBC,EAAe,EAAfA,gBAAiBhC,EAAe,EAAfA,gBAChE,OACI,iCACI,eAAIN,UAAU,mCAAkC,gCAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,mBACLE,GAAG,gBACHH,MAAON,EAAgBiC,0BACvB9B,SAAU,SAACC,GAAC,OAAK2B,EAAuB3B,EAAEC,OAAOC,QACjDI,QAASsB,IAAoBhC,EAAgBiC,6BAEjD,SAAChC,EAAA,cAAgB,CAACU,QAAQ,gBAAe,yBAG7C,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,mBACLE,GAAG,kBACHH,MAAON,EAAgBkC,4BACvB/B,SAAU,SAACC,GAAC,OAAK2B,EAAuB3B,EAAEC,OAAOC,QACjDI,QAASsB,IAAoBhC,EAAgBkC,+BAEjD,UAACjC,EAAA,cAAgB,CAACU,QAAQ,kBAAiB,wBAC7B,yDAIlB,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,mBACLE,GAAG,gBACHH,MAAON,EAAgBmC,0BACvBhC,SAAU,SAACC,GAAC,OAAK2B,EAAuB3B,EAAEC,OAAOC,QACjDI,QAASsB,IAAoBhC,EAAgBmC,6BAEjD,UAAClC,EAAA,cAAgB,CAACU,QAAQ,gBAAe,sBAC7B,sDCxB5B,EAnBwB,SAAH,GAAkF,IAA5EyB,EAAyB,EAAzBA,0BAA2BC,EAAmB,EAAnBA,oBAClD,OACI,iCACI,eAAI3C,UAAU,mCAAkC,gCAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,WACLK,KAAK,mBACLE,GAAG,oBACHN,SAAU,SAACC,GAAC,OAAKgC,EAA0BhC,EAAEC,OAAOK,UACpDA,QAAS2B,KAEb,SAACpC,EAAA,cAAgB,CAACU,QAAQ,oBAAmB,2BCqB7D,EAhCoB,SAAH,GAA+E,IAAzE2B,EAAiB,EAAjBA,kBAAmBC,EAAW,EAAXA,YAAavC,EAAe,EAAfA,gBACnD,OACI,iCACI,eAAIN,UAAU,mCAAkC,qBAEhD,UAACO,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,eACLE,GAAG,mBACHH,MAAON,EAAgBwC,kBACvBrC,SAAU,SAACC,GAAC,OAAKkC,EAAkBlC,EAAEC,OAAOC,QAC5CI,QAAS6B,IAAgBvC,EAAgBwC,qBAE7C,SAACvC,EAAA,cAAgB,CAACU,QAAQ,mBAAkB,sBAGhD,UAACV,EAAA,QAAU,CAACP,UAAU,8BAA6B,WAC/C,SAACO,EAAA,cAAgB,CACbC,KAAK,QACLK,KAAK,eACLE,GAAG,oBACHH,MAAON,EAAgByC,mBACvBtC,SAAU,SAACC,GAAC,OAAKkC,EAAkBlC,EAAEC,OAAOC,QAC5CI,QAAS6B,IAAgBvC,EAAgByC,sBAE7C,SAACxC,EAAA,cAAgB,CAACU,QAAQ,oBAAmB,0BC8P7D,EAlQwB,WACpB,OAAkC+B,EAAAA,EAAAA,MAA1BC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YACVC,GAAUC,EAAAA,EAAAA,MAAVD,MAER,EASID,GAAY,SAACG,GAAK,MAAM,CACxBjC,YAAaiC,EAAMC,OAAOlC,YAC1Bf,WAAYgD,EAAMC,OAAOjD,WACzBmB,YAAa6B,EAAMC,OAAO9B,YAC1BI,aAAcyB,EAAMC,OAAO1B,aAC3BI,iBAAkBqB,EAAMC,OAAOtB,iBAC/BM,gBAAiBe,EAAMC,OAAOhB,gBAC9BK,oBAAqBU,EAAMC,OAAOX,oBAClCE,YAAaQ,EAAMC,OAAOT,gBAhB1BzB,EAAW,EAAXA,YACAf,EAAU,EAAVA,WACAmB,EAAW,EAAXA,YACAI,EAAY,EAAZA,aACAU,EAAe,EAAfA,gBACAN,EAAgB,EAAhBA,iBACAW,EAAmB,EAAnBA,oBACAE,EAAW,EAAXA,YAYJ,GAAoDU,EAAAA,EAAAA,WAAkB,GAAM,eAArEC,EAAkB,KAAEC,EAAqB,KAChD,GAAsDF,EAAAA,EAAAA,WAAkB,GAAM,eAAvEG,EAAmB,KAAEC,EAAsB,KAClD,GAAoDJ,EAAAA,EAAAA,WAAkB,GAAM,eAArEK,EAAkB,KAAEC,EAAqB,KAChD,GAAoDN,EAAAA,EAAAA,WAAkB,GAAM,eAArEO,EAAkB,KAAEC,EAAqB,KAK1CC,GAAsBC,EAAAA,EAAAA,cAAY,WACpCR,EAAsBrC,IAAgBd,EAAAA,GAAAA,mBACtCqD,EAAuBtD,IAAeC,EAAAA,GAAAA,mBACtCuD,EAAsBxD,IAAeC,EAAAA,GAAAA,mBAAiD6C,EAAQ,KAC9FY,EAAsB1D,IAAeC,EAAAA,GAAAA,qBACtC,CAACc,EAAaf,EAAY8C,KAE7Be,EAAAA,EAAAA,YAAU,WACNF,MACD,CAACA,IAKJ,IAAM5D,EAAmB,SAACQ,GAEtB,GACS,eAFIA,EAGLqC,GAASkB,EAAAA,EAAAA,IAAa7D,EAAAA,GAAAA,yBAGtB2C,GAASkB,EAAAA,EAAAA,IAAa7D,EAAAA,GAAAA,mBAQ5Ba,EAA0B,SAACP,GAG7B,GACS,SAHEA,EAIHqC,GAASmB,EAAAA,EAAAA,IAAkB9D,EAAAA,GAAAA,yBAG3B2C,GAASmB,EAAAA,EAAAA,IAAkB9D,EAAAA,GAAAA,sBAQjCiB,EAAkB,SAACX,GAGrB,GACS,UAHEA,EAIHqC,GAASoB,EAAAA,EAAAA,IAAkB/D,EAAAA,GAAAA,0BAG3B2C,GAASoB,EAAAA,EAAAA,IAAkB/D,EAAAA,GAAAA,sBAQjCqB,EAAqB,SAACf,GAGxB,GACS,eAHMA,EAIPqC,GAASqB,EAAAA,EAAAA,IAAoBhE,EAAAA,GAAAA,gCAG7B2C,GAASqB,EAAAA,EAAAA,IAAoBhE,EAAAA,GAAAA,uBAQnCyB,EAAyB,SAACnB,GAE5B,OADYA,GAER,IAAK,OACDqC,GAASsB,EAAAA,EAAAA,IAAmBjE,EAAAA,GAAAA,0BAC5B,MACJ,IAAK,QACD2C,GAASsB,EAAAA,EAAAA,IAAmBjE,EAAAA,GAAAA,2BAC5B,MACJ,IAAK,WACD2C,GAASsB,EAAAA,EAAAA,IAAmBjE,EAAAA,GAAAA,8BAC5B,MACJ,QACI2C,GAASsB,EAAAA,EAAAA,IAAmBjE,EAAAA,GAAAA,6BAQlC+B,EAAyB,SAACzB,GAE5B,OADWA,GAEP,IAAK,YACDqC,GAASuB,EAAAA,EAAAA,IAAkBlE,EAAAA,GAAAA,8BAC3B,MACJ,IAAK,UACD2C,GAASuB,EAAAA,EAAAA,IAAkBlE,EAAAA,GAAAA,4BAC3B,MACJ,QACI2C,GAASuB,EAAAA,EAAAA,IAAkBlE,EAAAA,GAAAA,8BAQjCoC,EAA4B,SAAC9B,GAC/B,IAAII,EAAUJ,EACdqC,GAASwB,EAAAA,EAAAA,IAAsBzD,KAM7B4B,EAAoB,SAAChC,GAEvB,GACS,UAFGA,EAGJqC,GAASyB,EAAAA,EAAAA,IAAkBpE,EAAAA,GAAAA,0BAG3B2C,GAASyB,EAAAA,EAAAA,IAAkBpE,EAAAA,GAAAA,qBAmBvC,OACI,iBAAKN,UAAU,MAAK,WAChB,UAAC2E,EAAA,EAAK,CAACC,QAAQ,UAAS,WACpB,2CAA2B,8CAI/B,SAAC,EAAW,CACRxE,iBAAkBA,EAClBC,WAAYA,EACZC,gBAAiBA,EAAAA,MAErB,SAAC,EAAW,CACRa,wBAAyBA,EACzBC,YAAaA,EACbd,gBAAiBA,EAAAA,MAIrB,SAAC,EAAW,CACRiB,gBAAiBA,EACjBC,YAAaA,EACblB,gBAAiBA,EAAAA,MAIrB,SAAC,EAAa,CACVsB,aAAcA,EACdD,mBAAoBA,EACpBrB,gBAAiBA,EAAAA,KAIpBoD,IACG,SAAC,EAAgB,CACb3B,uBAAwBA,EACxBC,iBAAkBA,EAClB1B,gBAAiBA,EAAAA,KAKxBsD,IACG,SAAC,EAAe,CACZvB,uBAAwBA,EACxBC,gBAAiBA,EACjBhC,gBAAiBA,EAAAA,KAKxBwD,IACG,SAAC,EAAe,CACZpB,0BAA2BA,EAC3BC,oBAAqBA,IAK5Ba,IACG,SAAC,EAAW,CACRZ,kBAAmBA,EACnBC,YAAaA,EACbvC,gBAAiBA,EAAAA,MAIzB,gBAAKN,UAAU,cAAa,UACxB,SAAC6E,EAAA,EAAM,CAAC9D,GAAG,WAAW+D,QAAS,kBA9EvC1E,EAAiBE,EAAAA,GAAAA,iBACjBa,EAAwBb,EAAAA,GAAAA,oBACxBiB,EAAgBjB,EAAAA,GAAAA,oBAChBqB,EAAmBrB,EAAAA,GAAAA,qBACnByB,EAAuBzB,EAAAA,GAAAA,0BACvBoC,GAA0B,GAC1BE,EAAkBtC,EAAAA,GAAAA,yBAClB+B,EAAuB/B,EAAAA,GAAAA,4BAuE8B,oCC7M7D,EA9DqB,WACjB,OAAkC0C,EAAAA,EAAAA,MAA1BC,EAAQ,EAARA,SAAUC,EAAW,EAAXA,YACZ6B,GAAuBC,EAAAA,EAAAA,QAAO,MAE5BC,EAAuB/B,GAAY,SAACG,GAAK,MAAM,CACnD4B,mBAAoB5B,EAAMC,OAAO2B,uBAD7BA,mBAeFC,GAAmBjB,EAAAA,EAAAA,cACrB,SAACvD,GACG,GAAIuE,EAAoB,CACpB,GAAIF,GAAmBA,EAAgBI,SAAWJ,EAAgBI,QAAQC,SAAS1E,EAAEC,QACjF,OAEAsC,GAASoC,EAAAA,EAAAA,UAIrB,CAACN,EAAiB9B,EAAUgC,IAUhC,OAPAf,EAAAA,EAAAA,YAAU,WAEN,OADAoB,SAASC,iBAAiB,YAAaL,GAAkB,GAClD,WACHI,SAASE,oBAAoB,YAAaN,GAAkB,MAEjE,CAACA,KAGA,iCACI,gBAAKlF,UAAU,YAAYyF,IAAKV,EAAgB,UAC5C,UAACW,EAAA,EAAS,CAACzF,MAAO,CAAE0F,UAAW,OAAQC,OAAQ,KAAS5F,UAAU,QAAO,WACrE,iBAAKA,UAAU,iBAAgB,WAC3B,SAAC,KAAI,CAAC6F,GAAG,IAAI7F,UAAU,6BAA6B8E,QAjCpD,SAACpE,GACjBA,EAAEoF,iBACF7C,GAASoC,EAAAA,EAAAA,QA+BgF,UACrE,cAAGrF,UAAU,qBAEjB,eAAIA,UAAU,yBAAwB,kCAG1C,SAAC+F,EAAA,UAAW,CAAC/F,UAAU,OAAM,UACzB,SAAC+F,EAAA,OAAQ,CAACC,QAAM,EAACC,SAAS,kBAAiB,UACvC,SAAC,EAAe,cAKhC,gBAAKjG,UAAU","sources":["components/Scrollbar.tsx","components/ThemeCustomizer/LayoutTypes.tsx","components/ThemeCustomizer/LayoutColor.tsx","components/ThemeCustomizer/LayoutWidth.tsx","components/ThemeCustomizer/MenuPositions.tsx","components/ThemeCustomizer/LeftSideBarTheme.tsx","components/ThemeCustomizer/LeftSideBarType.tsx","components/ThemeCustomizer/SidebarUserInfo.tsx","components/ThemeCustomizer/TopbarTheme.tsx","components/ThemeCustomizer/index.tsx","layouts/RightSidebar.tsx"],"sourcesContent":["import SimpleBar from 'simplebar-react';\n\ntype ScrollbarProps = SimpleBar.Props & {\n    className?: string;\n    style?: Record<string, unknown>;\n    children?: unknown;\n};\n\nconst Scrollbar = ({ className, style, children, ...otherProps }: ScrollbarProps) => {\n    return (\n        <SimpleBar className={className} style={style} {...otherProps}>\n            {children}\n        </SimpleBar>\n    );\n};\n\nexport default Scrollbar;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ntype LayoutTypesProps = {\n    changeLayoutType: (value: string) => void;\n    layoutType: string;\n    layoutConstants: typeof layoutConstants.LayoutTypes;\n};\n\nconst LayoutTypes = ({ changeLayoutType, layoutType, layoutConstants }: LayoutTypesProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Layout</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_VERTICAL}\n                    id=\"vertical-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_VERTICAL}\n                />\n                <Form.Check.Label htmlFor=\"vertical-layout\">Vertical Layout</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    onChange={(e) => changeLayoutType(e.target.value)}\n                    name=\"layout-type\"\n                    value={layoutConstants.LAYOUT_HORIZONTAL}\n                    id=\"horizontal-layout\"\n                    checked={layoutType === layoutConstants.LAYOUT_HORIZONTAL}\n                />\n                <Form.Check.Label htmlFor=\"horizontal-layout\">Horizontal Layout</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutTypes;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ntype LayoutColorProps = {\n    changeLayoutColorScheme: (value: string) => void;\n    layoutColor: string;\n    layoutConstants: typeof layoutConstants.LayoutColor;\n};\n\nconst LayoutColor = ({ changeLayoutColorScheme, layoutColor, layoutConstants }: LayoutColorProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Color Scheme</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"color\"\n                    id=\"light-check\"\n                    value={layoutConstants.LAYOUT_COLOR_LIGHT}\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"fluid-check\">Light Mode</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"color\"\n                    id=\"dark-check\"\n                    value={layoutConstants.LAYOUT_COLOR_DARK}\n                    onChange={(e) => changeLayoutColorScheme(e.target.value)}\n                    checked={layoutColor === layoutConstants.LAYOUT_COLOR_DARK}\n                />\n                <Form.Check.Label htmlFor=\"boxed-check\">Dark Mode</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutColor;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ntype LayoutWidthProps = {\n    changeWidthMode: (value: string) => void;\n    layoutWidth: string;\n    layoutConstants: typeof layoutConstants.LayoutWidth;\n};\n\nconst LayoutWidth = ({ changeWidthMode, layoutWidth, layoutConstants }: LayoutWidthProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Width</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"width\"\n                    id=\"fluid-check\"\n                    value={layoutConstants.LAYOUT_WIDTH_FLUID}\n                    onChange={(e) => changeWidthMode(e.target.value)}\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_FLUID}\n                />\n                <Form.Check.Label htmlFor=\"fluid-check\">Fluid</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"width\"\n                    id=\"boxed-check\"\n                    value={layoutConstants.LAYOUT_WIDTH_BOXED}\n                    onChange={(e) => changeWidthMode(e.target.value)}\n                    checked={layoutWidth === layoutConstants.LAYOUT_WIDTH_BOXED}\n                />\n                <Form.Check.Label htmlFor=\"boxed-check\">Boxed</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LayoutWidth;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ntype MenuPositionsProps = {\n    changeMenuPosition: (value: string) => void;\n    menuPosition: string;\n    layoutConstants: typeof layoutConstants.MenuPositions;\n};\n\nconst MenuPositions = ({ changeMenuPosition, menuPosition, layoutConstants }: MenuPositionsProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Menus (Leftsidebar and Topbar) Position</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"menus-position\"\n                    id=\"fixed-check\"\n                    value={layoutConstants.MENU_POSITION_FIXED}\n                    onChange={(e) => changeMenuPosition(e.target.value)}\n                    checked={menuPosition === layoutConstants.MENU_POSITION_FIXED}\n                />\n                <Form.Check.Label htmlFor=\"fixed-check\">Fixed</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"menus-position\"\n                    id=\"scrollable-check\"\n                    value={layoutConstants.MENU_POSITION_SCROLLABLE}\n                    onChange={(e) => changeMenuPosition(e.target.value)}\n                    checked={menuPosition === layoutConstants.MENU_POSITION_SCROLLABLE}\n                />\n                <Form.Check.Label htmlFor=\"scrollable-check\">Scrollable</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default MenuPositions;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ntype LeftSideBarThemeProps = {\n    changeLeftSidebarTheme: (value: string) => void;\n    leftSideBarTheme: string;\n    layoutConstants: typeof layoutConstants.SideBarTheme;\n};\n\nconst LeftSideBarTheme = ({ changeLeftSidebarTheme, leftSideBarTheme, layoutConstants }: LeftSideBarThemeProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Left Sidebar Color</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"light-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"light-check\">Light</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"dark-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_DARK}\n                />\n                <Form.Check.Label htmlFor=\"dark-check\">Dark</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"brand-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_BRAND}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_BRAND}\n                />\n                <Form.Check.Label htmlFor=\"brand-check\">Brand</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"theme\"\n                    id=\"gradient-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_THEME_GRADIENT}\n                    onChange={(e) => changeLeftSidebarTheme(e.target.value)}\n                    checked={leftSideBarTheme === layoutConstants.LEFT_SIDEBAR_THEME_GRADIENT}\n                />\n                <Form.Check.Label htmlFor=\"gradient-check\">Gradient</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LeftSideBarTheme;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ntype LeftSideBarTypeProps = {\n    changeLeftSiderbarType: (value: string) => void;\n    leftSideBarType: string;\n    layoutConstants: typeof layoutConstants.SideBarTypes;\n};\n\nconst LeftSideBarType = ({ changeLeftSiderbarType, leftSideBarType, layoutConstants }: LeftSideBarTypeProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Left Sidebar Size</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"default-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_DEFAULT}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_DEFAULT}\n                />\n                <Form.Check.Label htmlFor=\"default-check\">Default</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"condensed-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED}\n                />\n                <Form.Check.Label htmlFor=\"condensed-check\">\n                    Condensed <small>(Extra Small size)</small>\n                </Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"leftsidebar-size\"\n                    id=\"compact-check\"\n                    value={layoutConstants.LEFT_SIDEBAR_TYPE_COMPACT}\n                    onChange={(e) => changeLeftSiderbarType(e.target.value)}\n                    checked={leftSideBarType === layoutConstants.LEFT_SIDEBAR_TYPE_COMPACT}\n                />\n                <Form.Check.Label htmlFor=\"compact-check\">\n                    Compact <small>(Small size)</small>\n                </Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default LeftSideBarType;\n","import { Form } from 'react-bootstrap';\n\ntype SidebarUserInfoProps = {\n    toggleLeftSidebarUserInfo: (value: boolean) => void;\n    showSidebarUserInfo: boolean;\n};\n\nconst SidebarUserInfo = ({ toggleLeftSidebarUserInfo, showSidebarUserInfo }: SidebarUserInfoProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Sidebar User Info</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"checkbox\"\n                    name=\"leftsidebar-user\"\n                    id=\"sidebaruser-check\"\n                    onChange={(e) => toggleLeftSidebarUserInfo(e.target.checked)}\n                    checked={showSidebarUserInfo}\n                />\n                <Form.Check.Label htmlFor=\"sidebaruser-check\">Enable</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default SidebarUserInfo;\n","import { Form } from 'react-bootstrap';\nimport * as layoutConstants from '../../constants/layout';\n\ntype TopbarThemeProps = {\n    changeTopBarTheme: (value: string) => void;\n    topbarTheme: string;\n    layoutConstants: typeof layoutConstants.TopbarTheme;\n};\n\nconst TopbarTheme = ({ changeTopBarTheme, topbarTheme, layoutConstants }: TopbarThemeProps) => {\n    return (\n        <>\n            <h6 className=\"fw-medium font-14 mt-4 mb-2 pb-1\">Topbar</h6>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"topbar-color\"\n                    id=\"darktopbar-check\"\n                    value={layoutConstants.TOPBAR_THEME_DARK}\n                    onChange={(e) => changeTopBarTheme(e.target.value)}\n                    checked={topbarTheme === layoutConstants.TOPBAR_THEME_DARK}\n                />\n                <Form.Check.Label htmlFor=\"darktopbar-check\">Dark</Form.Check.Label>\n            </Form.Check>\n\n            <Form.Check className=\"form-check form-switch mb-1\">\n                <Form.Check.Input\n                    type=\"radio\"\n                    name=\"topbar-color\"\n                    id=\"lighttopbar-check\"\n                    value={layoutConstants.TOPBAR_THEME_LIGHT}\n                    onChange={(e) => changeTopBarTheme(e.target.value)}\n                    checked={topbarTheme === layoutConstants.TOPBAR_THEME_LIGHT}\n                />\n                <Form.Check.Label htmlFor=\"lighttopbar-check\">Light</Form.Check.Label>\n            </Form.Check>\n        </>\n    );\n};\n\nexport default TopbarTheme;\n","import { useState, useEffect, useCallback } from 'react';\nimport { Alert, Button } from 'react-bootstrap';\n\n// actions\nimport {\n    changeLayout,\n    changeLayoutColor,\n    changeLayoutWidth,\n    changeMenuPositions,\n    changeSidebarTheme,\n    changeSidebarType,\n    toggleSidebarUserInfo,\n    changeTopbarTheme,\n} from '../../redux/actions';\n\n// constants\nimport * as layoutConstants from '../../constants/layout';\n\n// custom hook\nimport { useViewport, useRedux } from '../../hooks/';\n\n// components\nimport LayoutTypes from './LayoutTypes';\nimport LayoutColor from './LayoutColor';\nimport LayoutWidth from './LayoutWidth';\nimport MenuPositions from './MenuPositions';\nimport LeftSideBarTheme from './LeftSideBarTheme';\nimport LeftSideBarType from './LeftSideBarType';\nimport SidebarUserInfo from './SidebarUserInfo';\nimport TopbarTheme from './TopbarTheme';\n\nconst ThemeCustomizer = () => {\n    const { dispatch, appSelector } = useRedux();\n    const { width } = useViewport();\n\n    const {\n        layoutColor,\n        layoutType,\n        layoutWidth,\n        menuPosition,\n        leftSideBarType,\n        leftSideBarTheme,\n        showSidebarUserInfo,\n        topbarTheme,\n    } = appSelector((state) => ({\n        layoutColor: state.Layout.layoutColor,\n        layoutType: state.Layout.layoutType,\n        layoutWidth: state.Layout.layoutWidth,\n        menuPosition: state.Layout.menuPosition,\n        leftSideBarTheme: state.Layout.leftSideBarTheme,\n        leftSideBarType: state.Layout.leftSideBarType,\n        showSidebarUserInfo: state.Layout.showSidebarUserInfo,\n        topbarTheme: state.Layout.topbarTheme,\n    }));\n\n    const [disableTopbarTheme, setDisableTopbarTheme] = useState<boolean>(false);\n    const [disableSidebarTheme, setDisableSidebarTheme] = useState<boolean>(false);\n    const [disableSidebarType, setDisableSidebarType] = useState<boolean>(false);\n    const [disableSidebarUser, setDisableSidebarUser] = useState<boolean>(false);\n\n    /**\n     * change state based on props changes\n     */\n    const _loadStateFromProps = useCallback(() => {\n        setDisableTopbarTheme(layoutColor !== layoutConstants.LayoutColor.LAYOUT_COLOR_DARK);\n        setDisableSidebarTheme(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n        setDisableSidebarType(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL && width > 991);\n        setDisableSidebarUser(layoutType !== layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL);\n    }, [layoutColor, layoutType, width]);\n\n    useEffect(() => {\n        _loadStateFromProps();\n    }, [_loadStateFromProps]);\n\n    /**\n     * On layout change\n     */\n    const changeLayoutType = (value: string) => {\n        var layout = value;\n        switch (layout) {\n            case 'horizontal':\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_HORIZONTAL));\n                break;\n            default:\n                dispatch(changeLayout(layoutConstants.LayoutTypes.LAYOUT_VERTICAL));\n                break;\n        }\n    };\n\n    /**\n     * Change the layout color\n     */\n    const changeLayoutColorScheme = (value: string) => {\n        var mode = value;\n\n        switch (mode) {\n            case 'dark':\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_DARK));\n                break;\n            default:\n                dispatch(changeLayoutColor(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT));\n                break;\n        }\n    };\n\n    /**\n     * Change the width mode\n     */\n    const changeWidthMode = (value: string) => {\n        var mode = value;\n\n        switch (mode) {\n            case 'boxed':\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_BOXED));\n                break;\n            default:\n                dispatch(changeLayoutWidth(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID));\n                break;\n        }\n    };\n\n    /*\n     * Change menus position\n     */\n    const changeMenuPosition = (value: string) => {\n        var position = value;\n\n        switch (position) {\n            case 'scrollable':\n                dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_SCROLLABLE));\n                break;\n            default:\n                dispatch(changeMenuPositions(layoutConstants.MenuPositions.MENU_POSITION_FIXED));\n                break;\n        }\n    };\n\n    /**\n     * Changes the theme\n     */\n    const changeLeftSidebarTheme = (value: string) => {\n        var theme = value;\n        switch (theme) {\n            case 'dark':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_DARK));\n                break;\n            case 'brand':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_BRAND));\n                break;\n            case 'gradient':\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_GRADIENT));\n                break;\n            default:\n                dispatch(changeSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT));\n                break;\n        }\n    };\n\n    /**\n     * Change the leftsiderbar type\n     */\n    const changeLeftSiderbarType = (value: string) => {\n        var type = value;\n        switch (type) {\n            case 'condensed':\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n                break;\n            case 'compact':\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_COMPACT));\n                break;\n            default:\n                dispatch(changeSidebarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n                break;\n        }\n    };\n\n    /*\n     * Toggle the leftsidebar use info\n     */\n    const toggleLeftSidebarUserInfo = (value: boolean) => {\n        var checked = value;\n        dispatch(toggleSidebarUserInfo(checked));\n    };\n\n    /*\n     * Change topbar theme\n     */\n    const changeTopBarTheme = (value: string) => {\n        var theme = value;\n        switch (theme) {\n            case 'light':\n                dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT));\n                break;\n            default:\n                dispatch(changeTopbarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_DARK));\n                break;\n        }\n    };\n\n    /**\n     * Reset everything\n     */\n    const reset = () => {\n        changeLayoutType(layoutConstants.LayoutTypes.LAYOUT_VERTICAL);\n        changeLayoutColorScheme(layoutConstants.LayoutColor.LAYOUT_COLOR_LIGHT);\n        changeWidthMode(layoutConstants.LayoutWidth.LAYOUT_WIDTH_FLUID);\n        changeMenuPosition(layoutConstants.MenuPositions.MENU_POSITION_FIXED);\n        changeLeftSidebarTheme(layoutConstants.SideBarTheme.LEFT_SIDEBAR_THEME_LIGHT);\n        toggleLeftSidebarUserInfo(true);\n        changeTopBarTheme(layoutConstants.TopbarTheme.TOPBAR_THEME_LIGHT);\n        changeLeftSiderbarType(layoutConstants.SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT);\n    };\n\n    return (\n        <div className=\"p-3\">\n            <Alert variant=\"warning\">\n                <strong>Customize </strong> the overall color scheme, Layout, etc.\n            </Alert>\n\n            {/* Layouts */}\n            <LayoutTypes\n                changeLayoutType={changeLayoutType}\n                layoutType={layoutType}\n                layoutConstants={layoutConstants.LayoutTypes}\n            />\n            <LayoutColor\n                changeLayoutColorScheme={changeLayoutColorScheme}\n                layoutColor={layoutColor}\n                layoutConstants={layoutConstants.LayoutColor}\n            />\n\n            {/* Width */}\n            <LayoutWidth\n                changeWidthMode={changeWidthMode}\n                layoutWidth={layoutWidth}\n                layoutConstants={layoutConstants.LayoutWidth}\n            />\n\n            {/* Menu Posiotions */}\n            <MenuPositions\n                menuPosition={menuPosition}\n                changeMenuPosition={changeMenuPosition}\n                layoutConstants={layoutConstants.MenuPositions}\n            />\n\n            {/* Left Sidebar */}\n            {disableSidebarTheme && (\n                <LeftSideBarTheme\n                    changeLeftSidebarTheme={changeLeftSidebarTheme}\n                    leftSideBarTheme={leftSideBarTheme}\n                    layoutConstants={layoutConstants.SideBarTheme}\n                />\n            )}\n\n            {/* Left Sidebar Size */}\n            {disableSidebarType && (\n                <LeftSideBarType\n                    changeLeftSiderbarType={changeLeftSiderbarType}\n                    leftSideBarType={leftSideBarType}\n                    layoutConstants={layoutConstants.SideBarTypes}\n                />\n            )}\n\n            {/* User Info */}\n            {disableSidebarUser && (\n                <SidebarUserInfo\n                    toggleLeftSidebarUserInfo={toggleLeftSidebarUserInfo}\n                    showSidebarUserInfo={showSidebarUserInfo}\n                />\n            )}\n\n            {/* Topbar */}\n            {disableTopbarTheme && (\n                <TopbarTheme\n                    changeTopBarTheme={changeTopBarTheme}\n                    topbarTheme={topbarTheme}\n                    layoutConstants={layoutConstants.TopbarTheme}\n                />\n            )}\n\n            <div className=\"d-grid mt-4\">\n                <Button id=\"resetBtn\" onClick={() => reset()}>\n                    Reset to Default\n                </Button>\n            </div>\n        </div>\n    );\n};\n\nexport default ThemeCustomizer;\n","import { useCallback, useEffect, useRef } from 'react';\nimport { Tab } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// actions\nimport { hideRightSidebar } from '../redux/actions';\n\n// hooks\nimport { useRedux } from '../hooks/';\n\n// components\nimport Scrollbar from '../components/Scrollbar';\nimport ThemeCustomizer from '../components/ThemeCustomizer';\n\nconst RightSidebar = () => {\n    const { dispatch, appSelector } = useRedux();\n    const rightBarNodeRef: any = useRef(null);\n\n    const { isOpenRightSideBar } = appSelector((state) => ({\n        isOpenRightSideBar: state.Layout.isOpenRightSideBar,\n    }));\n\n    /**\n     * Handles the close\n     */\n    const handleClose = (e: any) => {\n        e.preventDefault();\n        dispatch(hideRightSidebar());\n    };\n\n    /**\n     * Handle the click anywhere in doc\n     */\n    const handleOtherClick = useCallback(\n        (e: any) => {\n            if (isOpenRightSideBar) {\n                if (rightBarNodeRef && rightBarNodeRef.current && rightBarNodeRef.current.contains(e.target)) {\n                    return;\n                } else {\n                    dispatch(hideRightSidebar());\n                }\n            }\n        },\n        [rightBarNodeRef, dispatch, isOpenRightSideBar]\n    );\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleOtherClick, false);\n        return () => {\n            document.removeEventListener('mousedown', handleOtherClick, false);\n        };\n    }, [handleOtherClick]);\n\n    return (\n        <>\n            <div className=\"right-bar\" ref={rightBarNodeRef}>\n                <Scrollbar style={{ maxHeight: '100%', zIndex: 10000 }} className=\"h-100\">\n                    <div className=\"rightbar-title\">\n                        <Link to=\"#\" className=\"right-bar-toggle float-end\" onClick={handleClose}>\n                            <i className=\"mdi mdi-close\"></i>\n                        </Link>\n                        <h4 className=\"font-16 m-0 text-white\">Theme Customizer</h4>\n                    </div>\n\n                    <Tab.Content className=\"pt-0\">\n                        <Tab.Pane active eventKey=\"themecustomizer\">\n                            <ThemeCustomizer />\n                        </Tab.Pane>\n                    </Tab.Content>\n                </Scrollbar>\n            </div>\n            <div className=\"rightbar-overlay\"></div>\n        </>\n    );\n};\n\nexport default RightSidebar;\n"],"names":["className","style","children","otherProps","changeLayoutType","layoutType","layoutConstants","Form","type","onChange","e","target","value","name","LAYOUT_VERTICAL","id","checked","htmlFor","LAYOUT_HORIZONTAL","changeLayoutColorScheme","layoutColor","LAYOUT_COLOR_LIGHT","LAYOUT_COLOR_DARK","changeWidthMode","layoutWidth","LAYOUT_WIDTH_FLUID","LAYOUT_WIDTH_BOXED","changeMenuPosition","menuPosition","MENU_POSITION_FIXED","MENU_POSITION_SCROLLABLE","changeLeftSidebarTheme","leftSideBarTheme","LEFT_SIDEBAR_THEME_LIGHT","LEFT_SIDEBAR_THEME_DARK","LEFT_SIDEBAR_THEME_BRAND","LEFT_SIDEBAR_THEME_GRADIENT","changeLeftSiderbarType","leftSideBarType","LEFT_SIDEBAR_TYPE_DEFAULT","LEFT_SIDEBAR_TYPE_CONDENSED","LEFT_SIDEBAR_TYPE_COMPACT","toggleLeftSidebarUserInfo","showSidebarUserInfo","changeTopBarTheme","topbarTheme","TOPBAR_THEME_DARK","TOPBAR_THEME_LIGHT","useRedux","dispatch","appSelector","width","useViewport","state","Layout","useState","disableTopbarTheme","setDisableTopbarTheme","disableSidebarTheme","setDisableSidebarTheme","disableSidebarType","setDisableSidebarType","disableSidebarUser","setDisableSidebarUser","_loadStateFromProps","useCallback","useEffect","changeLayout","changeLayoutColor","changeLayoutWidth","changeMenuPositions","changeSidebarTheme","changeSidebarType","toggleSidebarUserInfo","changeTopbarTheme","Alert","variant","Button","onClick","rightBarNodeRef","useRef","isOpenRightSideBar","handleOtherClick","current","contains","hideRightSidebar","document","addEventListener","removeEventListener","ref","Scrollbar","maxHeight","zIndex","to","preventDefault","Tab","active","eventKey"],"sourceRoot":""}