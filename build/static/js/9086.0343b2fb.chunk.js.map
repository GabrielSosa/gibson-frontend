{"version":3,"file":"static/js/9086.0343b2fb.chunk.js","mappings":"wVAYMA,GAAkBC,EAAAA,EAAAA,aAAmD,SAACC,EAAOC,GAI/E,OACI,kBACIC,KAAK,OACLC,UAAWC,GAAAA,CAAW,eAAgBJ,EAAMK,YAC5CC,QAASN,EAAMM,QACfC,MAAOP,EAAMO,MACbC,SATkB,WACtBC,QAAQC,IAAI,uBASRT,IAAKA,OAMXU,GAA2BZ,EAAAA,EAAAA,aAAmD,SAACC,EAAOC,GAAG,OAC3F,iBAAKE,UAAU,gCAAgCF,IAAKA,EAAI,WACpD,kBACIC,KAAK,OACLC,UAAWC,GAAAA,CAAW,eAAgBJ,EAAMK,YAC5CC,QAASN,EAAMM,QACfC,MAAOP,EAAMO,MACbK,UAAQ,KAEZ,iBAAMT,UAAU,mBAAkB,UAC9B,cAAGA,UAAU,mCA8DzB,EApC0B,SAACH,GAEvB,IAAMa,GAC6B,KAA9Bb,EAAMc,YAAa,IAChB,SAAChB,EAAe,CAACO,WAAYL,EAAMK,cAEnC,SAACM,EAAwB,CAACN,WAAYL,EAAMK,aAGpD,OACI,+BAEI,SAAC,IAAU,CACPU,kBAAmBf,EAAMe,mBAAqB,SAC9CC,aAAchB,EAAMgB,aACpBC,UAAWjB,EAAMiB,UACjBC,QAASlB,EAAMkB,QACfC,SAAUnB,EAAMO,MAChBC,SAAU,SAACY,GAAI,OAAKpB,EAAMQ,SAASY,IACnCC,YAAaR,EACbS,cAAetB,EAAMuB,GACrBC,eAAgBxB,EAAMwB,eACtBC,WAAYzB,EAAMyB,YAAc,UAChCC,YAAa1B,EAAM0B,YACnBC,WAAY3B,EAAM2B,YAAc,aAChCC,QAAS5B,EAAM4B,QACfC,QAAS7B,EAAM6B,QACfC,YAAa9B,EAAM8B,YACnBC,mBAAoB/B,EAAM+B,mBAC1BC,OAAQhC,EAAMgC,OACdC,aAAa,WC/EvBC,EAAc,WAChB,OAAgCC,EAAAA,EAAAA,UAAS,CAAC,WAAU,eAA7ChB,EAAQ,KAAEiB,EAAW,KAE5B,OACI,SAACC,EAAA,EAAI,WACD,UAACA,EAAA,OAAS,YACN,eAAIlC,UAAU,eAAc,UACxB,SAAC,KAAI,CAACmC,IAAI,aAAaC,GAAG,4CAA4CC,OAAO,SAAQ,6BAIzF,cAAGrC,UAAU,+BAA8B,+BAC3C,cAAGA,UAAU,qBAAoB,gDACjC,SAAC,IAAS,CACNI,MAAOY,EACPX,SAAU4B,EACVK,KAAK,SACLC,YAAY,kBAGhB,cAAGvC,UAAU,+BAA8B,iCAC3C,cAAGA,UAAU,qBAAoB,2DACjC,SAAC,KAAM,CACHwC,SAAS,EACTC,QAAS,CACL,CAAErC,MAAO,YAAasC,MAAO,aAC7B,CAAEtC,MAAO,aAAcsC,MAAO,cAC9B,CAAEtC,MAAO,UAAWsC,MAAO,YAE/B1C,UAAU,sCACV2C,gBAAgB,uBAO9BC,EAAa,WACf,OAAgDZ,EAAAA,EAAAA,UAAmB,IAAG,eAA/Da,EAAgB,KAAEC,EAAmB,KAC5C,GAA8Cd,EAAAA,EAAAA,UAAmB,IAAG,eAA7De,EAAe,KAAEC,EAAkB,KAEpCP,EAAyB,CAC3B,CAAEQ,GAAI,EAAG7C,MAAO,YAAasC,MAAO,aACpC,CAAEO,GAAI,EAAG7C,MAAO,aAAcsC,MAAO,cACrC,CAAEO,GAAI,EAAG7C,MAAO,UAAWsC,MAAO,YAWtC,OACI,SAACR,EAAA,EAAI,WACD,UAACA,EAAA,OAAS,YACN,eAAIlC,UAAU,eAAc,UACxB,cAAGmC,IAAI,aAAae,KAAK,sDAAsDb,OAAO,SAAQ,0BAIlG,cAAGrC,UAAU,+BAA8B,+BAC3C,cAAGA,UAAU,qBAAoB,6CACjC,SAAC,KAAS,CACNiD,GAAG,UACHE,SAAU,QACVC,UAAU,EACV/C,SAtBgB,SAACW,GAC7B8B,EAAoB9B,IAsBRyB,QAASA,EACTY,YAAY,oBACZrC,SAAU6B,KAGd,cAAG7C,UAAU,+BAA8B,iCAC3C,cAAGA,UAAU,qBAAoB,wDACjC,SAAC,KAAS,CACNiD,GAAG,UACHE,SAAS,QACTC,UAAQ,EACR/C,SA9BkB,SAACW,GAC/BgC,EAAmBhC,IA8BPyB,QAASA,EACTY,YAAY,oBACZrC,SAAU+B,UAOxBO,EAAc,WAChB,OAAwCtB,EAAAA,EAAAA,UAAe,IAAIuB,MAAO,eAA3DC,EAAY,KAAEC,EAAe,KAK9BC,EAAe,SAACzC,GACdA,GACAwC,EAAgBxC,IAGxB,OACI,SAACiB,EAAA,EAAI,WACD,UAACA,EAAA,OAAS,YACN,eAAIlC,UAAU,eAAc,iCAC5B,eAAGA,UAAU,qBAAoB,yCACF,SAAC,KAAI,CAACoC,GAAG,+BAA8B,oCAGtE,UAACuB,EAAA,EAAG,YACA,SAACC,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,yBAAoB,KAAC,mBAClD,SAAC,EAAiB,CACdW,WAAW,EACXP,MAAOoD,EACPnD,SAAU,SAACY,GACPyC,EAAazC,YAK7B,SAAC2C,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,8CAAyC,KAAC,mBACvE,SAAC,EAAiB,CACdW,WAAW,EACXgB,YAAa,EACbvB,MAAOoD,EACPnD,SAAU,SAACY,GACPyC,EAAazC,eAOjC,UAAC0C,EAAA,EAAG,YACA,SAACC,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,gCAA2B,KAAC,mBACzD,SAAC,EAAiB,CACdW,WAAW,EACXa,WAAW,aACXpB,MAAOoD,EACPnD,SAAU,SAACY,GACPyC,EAAazC,YAK7B,SAAC2C,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,iCAA4B,KAAC,mBAC1D,SAAC,EAAiB,CACdW,WAAW,EACXc,QAAS,IAAI8B,KACb7B,QAAS,IAAI6B,MAAK,IAAIA,MAAOO,SAAQ,IAAIP,MAAOQ,UAAY,IAC5D3D,MAAOoD,EACPnD,SAAU,SAACY,GACPyC,EAAazC,eAOjC,UAAC0C,EAAA,EAAG,YACA,SAACC,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,yBAAoB,KAAC,mBAClD,SAAC,EAAiB,CACdW,WAAW,EACXU,gBAAc,EACdC,WAAW,QACXF,GAAI,GACJI,WAAW,uBACXD,YAAY,OACZnB,MAAOoD,EACPnD,SAAU,SAACY,GACPyC,EAAazC,YAK7B,SAAC2C,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,uBAAkB,KAAC,mBAChD,SAAC,EAAiB,CACdW,WAAW,EACXU,gBAAc,EACdO,oBAAkB,EAClBR,GAAI,GACJI,WAAW,UACXD,YAAY,OACZnB,MAAOoD,EACPnD,SAAU,SAACY,GACPyC,EAAazC,oBAW3C+C,EAAa,WACf,OACI,SAAC9B,EAAA,EAAI,WACD,UAACA,EAAA,OAAS,YACN,eAAIlC,UAAU,eAAc,0BAC5B,eAAGA,UAAU,qBAAoB,2BACd,KACf,SAAC,KAAI,CAACoC,GAAG,kEAAiE,iCAG9E,UAACuB,EAAA,EAAG,YACA,SAACC,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,yCAAoC,KAAC,mBAClE,SAAC,IAAW,CACRiE,KAAM,CACF,IACA,QACA,KACA,IACA,IACA,KACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,MAEJZ,YAAY,iBACZrD,UAAU,uBAItB,SAAC4D,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,6BAAwB,KAAC,mBACtD,SAAC,IAAW,CACRiE,KAAM,CACF,IACA,QACA,KACA,KACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,KACA,KACA,MAEJZ,YAAY,iBACZrD,UAAU,0BAM1B,UAAC2D,EAAA,EAAG,YACA,SAACC,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,kBAAa,KAAC,mBAC3C,SAAC,IAAW,CACRiE,KAAM,CAAC,KAAM,KAAM,IAAK,KAAM,KAAM,IAAK,KAAM,KAAM,KAAM,MAC3DZ,YAAY,aACZrD,UAAU,uBAItB,SAAC4D,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,iBAAK7D,UAAU,OAAM,WACjB,kBAAOA,UAAU,aAAY,kBAAa,KAAC,mBAC3C,SAAC,IAAW,CACRiE,KAAM,CAAC,KAAM,KAAM,IAAK,KAAM,KAAM,IAAK,KAAM,MAC/CZ,YAAY,WACZrD,UAAU,+BAqD1C,EA3CqB,WAiBjB,OAfAkE,EAAAA,EAAAA,IAAa,CACTC,MAAO,gBACPC,gBAAiB,CACb,CACIC,KAAM,kBACN3B,MAAO,SAEX,CACI2B,KAAM,kBACN3B,MAAO,gBACP4B,QAAQ,OAMhB,iCACI,UAACX,EAAA,EAAG,YACA,SAACC,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,SAAC9B,EAAW,OAEhB,SAAC6B,EAAA,EAAG,CAACC,GAAI,EAAE,UACP,SAACjB,EAAU,UAInB,SAACe,EAAA,EAAG,WACA,SAACC,EAAA,EAAG,CAACW,GAAI,GAAG,UACR,SAACjB,EAAW,SAIpB,SAACK,EAAA,EAAG,WACA,SAACC,EAAA,EAAG,CAACW,GAAI,GAAG,UACR,SAACP,EAAU","sources":["components/Datepicker.tsx","pages/forms/Advanced.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport DatePicker from 'react-datepicker';\nimport classNames from 'classnames';\n\ntype DatepickerInputProps = {\n    onClick?: () => void;\n    value?: string;\n    inputClass: string;\n    children?: React.ReactNode;\n};\n\n/* Datepicker with Input */\nconst DatepickerInput = forwardRef<HTMLInputElement, DatepickerInputProps>((props, ref) => {\n    const onDateValueChange = () => {\n        console.log('date value changed');\n    };\n    return (\n        <input\n            type=\"text\"\n            className={classNames('form-control', props.inputClass)}\n            onClick={props.onClick}\n            value={props.value}\n            onChange={onDateValueChange}\n            ref={ref}\n        />\n    );\n});\n\n/* Datepicker with Addon Input */\nconst DatepickerInputWithAddon = forwardRef<HTMLInputElement, DatepickerInputProps>((props, ref) => (\n    <div className=\"input-group position-relative\" ref={ref}>\n        <input\n            type=\"text\"\n            className={classNames('form-control', props.inputClass)}\n            onClick={props.onClick}\n            value={props.value}\n            readOnly\n        />\n        <span className=\"input-group-text\">\n            <i className=\"ri-calendar-event-fill\"></i>\n        </span>\n    </div>\n));\n\ntype AdmintoDatepickerProps = {\n    value?: Date;\n    selectsRange?: boolean;\n    startDate?: Date;\n    endDate?: Date;\n    calendarClassName?: string;\n    onChange: (date: any) => void;\n    hideAddon?: boolean;\n    inputClass?: string;\n    dateFormat?: string;\n    minDate?: Date;\n    maxDate?: Date;\n    showTimeSelect?: boolean;\n    tI?: number;\n    timeCaption?: string;\n    timeFormat?: string;\n    showTimeSelectOnly?: boolean;\n    monthsShown?: number;\n    inline?: boolean;\n};\n\nconst AdmintoDatepicker = (props: AdmintoDatepickerProps) => {\n    // handle custom input\n    const input =\n        (props.hideAddon || false) === true ? (\n            <DatepickerInput inputClass={props.inputClass!} />\n        ) : (\n            <DatepickerInputWithAddon inputClass={props.inputClass!} />\n        );\n\n    return (\n        <>\n            {/* date picker control */}\n            <DatePicker\n                calendarClassName={props.calendarClassName || 'shadow'}\n                selectsRange={props.selectsRange}\n                startDate={props.startDate}\n                endDate={props.endDate}\n                selected={props.value}\n                onChange={(date) => props.onChange(date)}\n                customInput={input}\n                timeIntervals={props.tI}\n                showTimeSelect={props.showTimeSelect}\n                timeFormat={props.timeFormat || 'hh:mm a'}\n                timeCaption={props.timeCaption}\n                dateFormat={props.dateFormat || 'MM/dd/yyyy'}\n                minDate={props.minDate}\n                maxDate={props.maxDate}\n                monthsShown={props.monthsShown}\n                showTimeSelectOnly={props.showTimeSelectOnly}\n                inline={props.inline}\n                autoComplete=\"off\"\n            />\n        </>\n    );\n};\n\nexport default AdmintoDatepicker;\n","import { useState } from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Select from 'react-select';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport MaskedInput from 'react-text-mask';\nimport { TagsInput } from \"react-tag-input-component\";\n\n// hooks\nimport { usePageTitle } from '../../hooks';\n\n// components\nimport AdmintoDatepicker from '../../components/Datepicker';\n\ntype Option = string | Record<string, any>;\n\nconst ReactSelect = () => {\n    const [selected, setSelected] = useState([\"papaya\"]);\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">\n                    <Link rel=\"noreferrer\" to=\"https://github.com/JedWatson/react-select\" target=\"_blank\">\n                        React select\n                    </Link>\n                </h4>\n                <p className=\"mb-1 mt-3 fw-bold text-muted\">Single Selection</p>\n                <p className=\"text-muted font-14\">React-Select based Select element</p>\n                <TagsInput\n                    value={selected}\n                    onChange={setSelected}\n                    name=\"fruits\"\n                    placeHolder=\"enter fruits\"\n                />\n\n                <p className=\"mb-1 mt-3 fw-bold text-muted\">Multiple Selection</p>\n                <p className=\"text-muted font-14\">React-Select based Select (Multiple) element</p>\n                <Select\n                    isMulti={true}\n                    options={[\n                        { value: 'chocolate', label: 'Chocolate' },\n                        { value: 'strawberry', label: 'Strawberry' },\n                        { value: 'vanilla', label: 'Vanilla' },\n                    ]}\n                    className=\"react-select react-select-container\"\n                    classNamePrefix=\"react-select\"\n                ></Select>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst Typeaheads = () => {\n    const [singleSelections, setSingleSelections] = useState<Option[]>([]);\n    const [multiSelections, setMultiSelections] = useState<Option[]>([]);\n\n    const options: Array<Option> = [\n        { id: 1, value: 'chocolate', label: 'Chocolate' },\n        { id: 2, value: 'strawberry', label: 'Strawberry' },\n        { id: 3, value: 'vanilla', label: 'Vanilla' },\n    ];\n\n    const onChangeSingleSelection = (selected: Option[]) => {\n        setSingleSelections(selected);\n    };\n\n    const onChangeMultipleSelection = (selected: Option[]) => {\n        setMultiSelections(selected);\n    };\n\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">\n                    <a rel=\"noreferrer\" href=\"http://ericgio.github.io/react-bootstrap-typeahead/\" target=\"_blank\">\n                        Typeahead\n                    </a>\n                </h4>\n                <p className=\"mb-1 mt-3 fw-bold text-muted\">Single Selection</p>\n                <p className=\"text-muted font-14\">Typeahead based Select element</p>\n                <Typeahead\n                    id=\"select2\"\n                    labelKey={'label'}\n                    multiple={false}\n                    onChange={onChangeSingleSelection}\n                    options={options}\n                    placeholder=\"Choose a state...\"\n                    selected={singleSelections}\n                />\n\n                <p className=\"mb-1 mt-3 fw-bold text-muted\">Multiple Selection</p>\n                <p className=\"text-muted font-14\">Typeahead based Select (Multiple) element</p>\n                <Typeahead\n                    id=\"select3\"\n                    labelKey=\"label\"\n                    multiple\n                    onChange={onChangeMultipleSelection}\n                    options={options}\n                    placeholder=\"Choose a state...\"\n                    selected={multiSelections}\n                />\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst DatePickers = () => {\n    const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n\n    /*\n     * handle date change\n     */\n    const onDateChange = (date: Date) => {\n        if (date) {\n            setSelectedDate(date);\n        }\n    };\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Date &amp; Time Picker</h4>\n                <p className=\"text-muted font-14\">\n                    A simple date picker using <Link to=\"https://reactdatepicker.com/\">ReactJS Datepicker</Link>\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Single Date</label> <br />\n                            <AdmintoDatepicker\n                                hideAddon={true}\n                                value={selectedDate}\n                                onChange={(date: Date) => {\n                                    onDateChange(date);\n                                }}\n                            />\n                        </div>\n                    </Col>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Single Date with multiple months</label> <br />\n                            <AdmintoDatepicker\n                                hideAddon={true}\n                                monthsShown={2}\n                                value={selectedDate}\n                                onChange={(date: Date) => {\n                                    onDateChange(date);\n                                }}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Custom date format</label> <br />\n                            <AdmintoDatepicker\n                                hideAddon={true}\n                                dateFormat=\"yyyy-MM-dd\"\n                                value={selectedDate}\n                                onChange={(date: Date) => {\n                                    onDateChange(date);\n                                }}\n                            />\n                        </div>\n                    </Col>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Specific date range</label> <br />\n                            <AdmintoDatepicker\n                                hideAddon={true}\n                                minDate={new Date()}\n                                maxDate={new Date(new Date().setDate(new Date().getDate() + 7))}\n                                value={selectedDate}\n                                onChange={(date: Date) => {\n                                    onDateChange(date);\n                                }}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Select Time</label> <br />\n                            <AdmintoDatepicker\n                                hideAddon={true}\n                                showTimeSelect\n                                timeFormat=\"HH:mm\"\n                                tI={60}\n                                dateFormat=\"MMMM d, yyyy h:mm aa\"\n                                timeCaption=\"time\"\n                                value={selectedDate}\n                                onChange={(date: Date) => {\n                                    onDateChange(date);\n                                }}\n                            />\n                        </div>\n                    </Col>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Time only</label> <br />\n                            <AdmintoDatepicker\n                                hideAddon={true}\n                                showTimeSelect\n                                showTimeSelectOnly\n                                tI={60}\n                                dateFormat=\"h:mm aa\"\n                                timeCaption=\"Time\"\n                                value={selectedDate}\n                                onChange={(date: Date) => {\n                                    onDateChange(date);\n                                }}\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst InputMasks = () => {\n    return (\n        <Card>\n            <Card.Body>\n                <h4 className=\"header-title\">Input Masks</h4>\n                <p className=\"text-muted font-14\">\n                    Input masks by{' '}\n                    <Link to=\"https://github.com/text-mask/text-mask/tree/master/react#readme\">react-text-mask</Link>\n                </p>\n\n                <Row>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Phone Number with Area Code</label> <br />\n                            <MaskedInput\n                                mask={[\n                                    '(',\n                                    /[1-9]/,\n                                    /\\d/,\n                                    ')',\n                                    ' ',\n                                    /\\d/,\n                                    /\\d/,\n                                    /\\d/,\n                                    /\\d/,\n                                    '-',\n                                    /\\d/,\n                                    /\\d/,\n                                    /\\d/,\n                                    /\\d/,\n                                ]}\n                                placeholder=\"(__) ____-____\"\n                                className=\"form-control\"\n                            />\n                        </div>\n                    </Col>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">US Phone Number</label> <br />\n                            <MaskedInput\n                                mask={[\n                                    '(',\n                                    /[1-9]/,\n                                    /\\d/,\n                                    /\\d/,\n                                    ')',\n                                    ' ',\n                                    /\\d/,\n                                    /\\d/,\n                                    /\\d/,\n                                    '-',\n                                    /\\d/,\n                                    /\\d/,\n                                    /\\d/,\n                                    /\\d/,\n                                ]}\n                                placeholder=\"(___) ___-____\"\n                                className=\"form-control\"\n                            />\n                        </div>\n                    </Col>\n                </Row>\n\n                <Row>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Date</label> <br />\n                            <MaskedInput\n                                mask={[/\\d/, /\\d/, '/', /\\d/, /\\d/, '/', /\\d/, /\\d/, /\\d/, /\\d/]}\n                                placeholder=\"__/__/____\"\n                                className=\"form-control\"\n                            />\n                        </div>\n                    </Col>\n                    <Col lg={6}>\n                        <div className=\"mb-3\">\n                            <label className=\"form-label\">Time</label> <br />\n                            <MaskedInput\n                                mask={[/\\d/, /\\d/, ':', /\\d/, /\\d/, ':', /\\d/, /\\d/]}\n                                placeholder=\"__:__:__\"\n                                className=\"form-control\"\n                            />\n                        </div>\n                    </Col>\n                </Row>\n            </Card.Body>\n        </Card>\n    );\n};\n\nconst FormAdvanced = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Advanced Form',\n        breadCrumbItems: [\n            {\n                path: '/forms/advanced',\n                label: 'Forms',\n            },\n            {\n                path: '/forms/advanced',\n                label: 'Advanced Form',\n                active: true,\n            },\n        ],\n    });\n\n    return (\n        <>\n            <Row>\n                <Col lg={6}>\n                    <ReactSelect />\n                </Col>\n                <Col lg={6}>\n                    <Typeaheads />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xs={12}>\n                    <DatePickers />\n                </Col>\n            </Row>\n\n            <Row>\n                <Col xs={12}>\n                    <InputMasks />\n                </Col>\n            </Row>\n        </>\n    );\n};\n\nexport default FormAdvanced;\n"],"names":["DatepickerInput","forwardRef","props","ref","type","className","classNames","inputClass","onClick","value","onChange","console","log","DatepickerInputWithAddon","readOnly","input","hideAddon","calendarClassName","selectsRange","startDate","endDate","selected","date","customInput","timeIntervals","tI","showTimeSelect","timeFormat","timeCaption","dateFormat","minDate","maxDate","monthsShown","showTimeSelectOnly","inline","autoComplete","ReactSelect","useState","setSelected","Card","rel","to","target","name","placeHolder","isMulti","options","label","classNamePrefix","Typeaheads","singleSelections","setSingleSelections","multiSelections","setMultiSelections","id","href","labelKey","multiple","placeholder","DatePickers","Date","selectedDate","setSelectedDate","onDateChange","Row","Col","lg","setDate","getDate","InputMasks","mask","usePageTitle","title","breadCrumbItems","path","active","xs"],"sourceRoot":""}