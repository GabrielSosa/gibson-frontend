{"version":3,"file":"static/js/4227.c2db9cd2.chunk.js","mappings":"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","sources":["components/form/FormInput.tsx","components/form/VerticalForm.tsx","pages/apps/Tasks/Board/Task.tsx","pages/apps/Tasks/Board/data.ts","pages/apps/Tasks/Board/index.tsx"],"sourcesContent":["import { useState, InputHTMLAttributes } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport classNames from 'classnames';\n\nimport { FieldErrors, Control } from 'react-hook-form';\n\ntype FormInputProps = InputHTMLAttributes<HTMLInputElement> & {\n    endIcon?: boolean;\n    label?: string;\n    type?: string;\n    name: string;\n    comp?: string;\n    placeholder?: string;\n    register?: any;\n    errors?: FieldErrors;\n    control?: Control<any>;\n    className?: string;\n    labelClassName?: string;\n    containerClass?: string;\n    textClassName?: string;\n    refCallback?: any;\n    action?: React.ReactNode;\n    rows?: number;\n};\n\n/* Password Input with addons */\nconst PasswordInput = ({\n    name,\n    placeholder,\n    refCallback,\n    errors,\n    control,\n    register,\n    className,\n    ...otherProps\n}: FormInputProps) => {\n    const [showPassword, setShowPassword] = useState<boolean>(false);\n\n    return (\n        <>\n            <InputGroup className=\"mb-0\">\n                <Form.Control\n                    type={showPassword ? 'text' : 'password'}\n                    placeholder={placeholder}\n                    name={name}\n                    id={name}\n                    as=\"input\"\n                    ref={(r: HTMLInputElement) => {\n                        if (refCallback) refCallback(r);\n                    }}\n                    className={className}\n                    isInvalid={errors && errors[name] ? true : false}\n                    {...(register ? register(name) : {})}\n                    autoComplete={name}\n                    {...otherProps}\n                />\n                <div\n                    className={classNames('input-group-text', 'input-group-password', {\n                        'show-password': showPassword,\n                    })}\n                    data-password={showPassword ? 'true' : 'false'}\n                >\n                    <span\n                        className=\"password-eye\"\n                        onClick={() => {\n                            setShowPassword(!showPassword);\n                        }}\n                    ></span>\n                </div>\n            </InputGroup>\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            {type === 'password' && endIcon ? (\n                <>\n                    <PasswordInput\n                        name={name}\n                        placeholder={placeholder}\n                        refCallback={refCallback}\n                        errors={errors!}\n                        register={register}\n                        className={className}\n                        {...otherProps}\n                    />\n                </>\n            ) : (\n                <>\n                    <Form.Control\n                        type={type}\n                        placeholder={placeholder}\n                        name={name}\n                        as={comp}\n                        id={name}\n                        ref={(r: HTMLInputElement) => {\n                            if (refCallback) refCallback(r);\n                        }}\n                        className={className}\n                        isInvalid={errors && errors[name] ? true : false}\n                        {...(register ? register(name) : {})}\n                        rows={rows}\n                        {...otherProps}\n                    ></Form.Control>\n\n                    {errors && errors[name] ? (\n                        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                            {errors[name]['message']}\n                        </Form.Control.Feedback>\n                    ) : null}\n                </>\n            )}\n        </>\n    );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    rows,\n    className,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Check\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n                    {errors[name]['message']}\n                </Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\n// handle select controls\nconst SelectInput = ({\n    type,\n    label,\n    name,\n    placeholder,\n    register,\n    errors,\n    comp,\n    className,\n    children,\n    refCallback,\n    ...otherProps\n}: FormInputProps) => {\n    return (\n        <>\n            <Form.Select\n                type={type}\n                label={label}\n                name={name}\n                id={name}\n                ref={(r: HTMLInputElement) => {\n                    if (refCallback) refCallback(r);\n                }}\n                children={children}\n                className={className}\n                isInvalid={errors && errors[name] ? true : false}\n                {...(register ? register(name) : {})}\n                {...otherProps}\n            />\n\n            {errors && errors[name] ? (\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\n            ) : null}\n        </>\n    );\n};\n\nconst FormInput = ({\n    label,\n    type,\n    name,\n    placeholder,\n    endIcon,\n    register,\n    errors,\n    control,\n    className,\n    labelClassName,\n    containerClass,\n    refCallback,\n    children,\n    action,\n    rows,\n    ...otherProps\n}: FormInputProps) => {\n    // handle input type\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\n\n    const hasEndIcon = endIcon !== undefined ? endIcon : true;\n\n    return (\n        <>\n            {type === 'hidden' ? (\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\n            ) : (\n                <>\n                    {type === 'select' ? (\n                        <Form.Group className={containerClass}>\n                            {label ? (\n                                <>\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\n                                    {action && action}\n                                </>\n                            ) : null}\n\n                            <SelectInput\n                                type={type}\n                                name={name}\n                                placeholder={placeholder}\n                                refCallback={refCallback}\n                                errors={errors}\n                                register={register}\n                                comp={comp}\n                                className={className}\n                                children={children}\n                                {...otherProps}\n                            />\n                        </Form.Group>\n                    ) : (\n                        <>\n                            {type === 'checkbox' || type === 'radio' ? (\n                                <Form.Group className={containerClass}>\n                                    <CheckInput\n                                        type={type}\n                                        label={label}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            ) : (\n                                <Form.Group className={containerClass}>\n                                    {label ? (\n                                        <>\n                                            <Form.Label className={labelClassName}>{label}</Form.Label>\n                                            {action && action}\n                                        </>\n                                    ) : null}\n\n                                    <TextualInput\n                                        type={type}\n                                        name={name}\n                                        placeholder={placeholder}\n                                        endIcon={hasEndIcon}\n                                        refCallback={refCallback}\n                                        errors={errors}\n                                        register={register}\n                                        comp={comp}\n                                        className={className}\n                                        rows={rows}\n                                        {...otherProps}\n                                    />\n                                </Form.Group>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n        </>\n    );\n};\n\nexport default FormInput;\n","import React from 'react';\nimport { useForm, Resolver, SubmitHandler, UnpackNestedValue, DeepPartial } from 'react-hook-form';\n\ntype VerticalFromProps<TFormValues> = {\n    defaultValues?: UnpackNestedValue<DeepPartial<TFormValues>>;\n    resolver?: Resolver<TFormValues>;\n    children?: React.ReactNode;\n    onSubmit: SubmitHandler<TFormValues>;\n    formClass?: string;\n};\n\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\n    defaultValues,\n    resolver,\n    children,\n    onSubmit,\n    formClass,\n}: VerticalFromProps<TFormValues>) => {\n    /*\n     * form methods\n     */\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        formState: { errors },\n    } = methods;\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n            {Array.isArray(children)\n                ? children.map((child) => {\n                      return child.props && child.props.name\n                          ? React.createElement(child.type, {\n                                ...{\n                                    ...child.props,\n                                    register,\n                                    key: child.props.name,\n                                    errors,\n                                    control,\n                                },\n                            })\n                          : child;\n                  })\n                : children}\n        </form>\n    );\n};\n\nexport default VerticalForm;\n","import classNames from 'classnames';\nimport { Form, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\n// types\nimport { KanbanBoardTask } from './types';\n\ntype TaskItemProps = {\n    task: KanbanBoardTask;\n};\n\n// task item\nconst TaskItem = (props: TaskItemProps) => {\n    const task = props.task || {};\n\n    return (\n        <>\n            <span\n                className={classNames('badge', 'float-end', {\n                    'bg-danger text-white': task.priority === 'Urgent',\n                    'bg-warning text-white': task.priority === 'High',\n                })}\n            >\n                {task.priority}\n            </span>\n            <div className=\"d-flex align-items-center mb-1\">\n                <Form.Check className=\"form-check form-check-success\">\n                    <Form.Check.Input type=\"checkbox\" name=\"taskCheck\" id=\"TaskCheck\" />\n                </Form.Check>\n                <h5 className=\"my-0\">\n                    <Link to=\"/apps/tasks/details\" className=\"text-dark ms-1\">\n                        {task.title}\n                    </Link>\n                </h5>\n            </div>\n\n            <ul className=\"list-inline kanban-detail\">\n                <li className=\"list-inline-item\">\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{task.userName}</Tooltip>}>\n                        <img src={task.userAvatar} alt={task.userName} className=\"avatar-sm rounded-circle\" />\n                    </OverlayTrigger>\n                </li>\n                <li className=\"list-inline-item\">\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{task.task + ' Tasks'}</Tooltip>}>\n                        <i className=\"mdi mdi-format-align-left\"></i>\n                    </OverlayTrigger>\n                </li>\n                <li className=\"list-inline-item\">\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip>{task.comment + ' Comments'}</Tooltip>}>\n                        <i className=\"mdi mdi-comment-outline\"></i>\n                    </OverlayTrigger>\n                </li>\n            </ul>\n        </>\n    );\n};\n\nexport default TaskItem;\n","// types\nimport { KanbanBoardTask } from './types';\n\n// images\nimport avatar1 from '../../../../assets/images/users/user-1.jpg';\nimport avatar2 from '../../../../assets/images/users/user-2.jpg';\nimport avatar3 from '../../../../assets/images/users/user-3.jpg';\nimport avatar4 from '../../../../assets/images/users/user-4.jpg';\nimport avatar5 from '../../../../assets/images/users/user-5.jpg';\nimport avatar6 from '../../../../assets/images/users/user-6.jpg';\nimport avatar7 from '../../../../assets/images/users/user-7.jpg';\nimport avatar8 from '../../../../assets/images/users/user-8.jpg';\nimport avatar9 from '../../../../assets/images/users/user-9.jpg';\nimport avatar10 from '../../../../assets/images/users/user-10.jpg';\n\nconst tasks: KanbanBoardTask[] = [\n    {\n        id: 1,\n        title: 'Improve animation loader',\n        status: 'Upcoming',\n        priority: 'Urgent',\n        userAvatar: avatar1,\n        userName: 'Latasha B. Seibel',\n        task: 5,\n        comment: 3,\n    },\n    {\n        id: 2,\n        title: 'Write a release note for Admin v1.5',\n        status: 'Upcoming',\n        priority: 'High',\n        userAvatar: avatar2,\n        userName: 'Janie R. Pinheiro',\n        task: 2,\n        comment: 4,\n    },\n    {\n        id: 3,\n        title: 'Invite user to a project',\n        status: 'Upcoming',\n        userAvatar: avatar3,\n        userName: 'Brian M. Behrens',\n        task: 9,\n        comment: 5,\n    },\n    {\n        id: 4,\n        title: 'Code HTML email template for welcome email',\n        status: 'Upcoming',\n        priority: 'Urgent',\n        userAvatar: avatar4,\n        userName: 'Keith S. Lindstrom',\n        task: 6,\n        comment: 9,\n    },\n    {\n        id: 5,\n        title: 'File Uploads on Cards',\n        status: 'Inprogress',\n        priority: 'Urgent',\n        userAvatar: avatar5,\n        userName: 'Russell H. Benson',\n        task: 2,\n        comment: 4,\n    },\n    {\n        id: 6,\n        title: 'Enable analytics tracking',\n        status: 'Inprogress',\n        priority: 'High',\n        userAvatar: avatar6,\n        userName: 'Jacquelyn R. Oleary',\n        task: 5,\n        comment: 3,\n    },\n    {\n        id: 7,\n        title: 'Improve animation order',\n        status: 'Inprogress',\n        userAvatar: avatar7,\n        userName: 'John A. Sherrill',\n        task: 8,\n        comment: 6,\n    },\n    {\n        id: 8,\n        title: 'Improve animation order',\n        status: 'Completed',\n        priority: 'Urgent',\n        userAvatar: avatar8,\n        userName: 'Jamie D. Schwartz',\n        task: 1,\n        comment: 3,\n    },\n    {\n        id: 9,\n        title: 'Write a release note for Admin v1.5',\n        status: 'Completed',\n        priority: 'High',\n        userAvatar: avatar9,\n        userName: 'Russell B. Clancy',\n        task: 7,\n        comment: 3,\n    },\n    {\n        id: 10,\n        title: 'Invite user to a project',\n        status: 'Completed',\n        userAvatar: avatar10,\n        userName: 'Robert B. Brown',\n        task: 6,\n        comment: 2,\n    },\n    {\n        id: 11,\n        title: 'Code HTML email template for welcome email',\n        status: 'Completed',\n        priority: 'Urgent',\n        userAvatar: avatar5,\n        userName: 'Maria K. Trevino',\n        task: 3,\n        comment: 5,\n    },\n];\n\nexport { tasks };\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, Dropdown, Modal, Button } from 'react-bootstrap';\nimport { Draggable, Droppable, DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\n// hooks\nimport { usePageTitle } from '../../../../hooks';\n\n// component\nimport { FormInput } from '../../../../components/form';\n\nimport TaskItem from './Task';\n\n// types\nimport { KanbanBoardTask } from './types';\n\n// dummy data\nimport { tasks } from './data';\n\n// images\nimport defaultAvatar from '../../../../assets/images/users/user-1.jpg';\n\ntype task = {\n    upcomingTasks: KanbanBoardTask[];\n    inprogressTasks: KanbanBoardTask[];\n    completedTasks: KanbanBoardTask[];\n};\n\n// kanban\nconst Kanban = () => {\n    // set pagetitle\n    usePageTitle({\n        title: 'Kanban Board',\n        breadCrumbItems: [\n            {\n                path: 'apps/tasks/kanban',\n                label: 'Tasks',\n            },\n            {\n                path: 'apps/tasks/kanban',\n                label: 'Kanban Board',\n                active: true,\n            },\n        ],\n    });\n\n    const [state, setState] = useState<task>({\n        upcomingTasks: tasks.filter((t) => t.status === 'Upcoming'),\n        inprogressTasks: tasks.filter((t) => t.status === 'Inprogress'),\n        completedTasks: tasks.filter((t) => t.status === 'Completed'),\n    });\n    const [totalTasks, setTotalTasks] = useState<number>(tasks.length);\n    const [newTaskModal, setNewTaskModal] = useState<boolean>(false);\n    const [newTaskDetails, setNewTaskDetails] = useState<any>(null);\n\n    /*\n     * Form validation schema\n     */\n    const schemaResolver = yupResolver(\n        yup.object().shape({\n            title: yup.string().required(),\n            userName: yup.string().required(),\n        })\n    );\n\n    /*\n     * Form methods\n     */\n    const methods = useForm({ resolver: schemaResolver });\n    const {\n        handleSubmit,\n        register,\n        control,\n        reset,\n        formState: { errors },\n    } = methods;\n\n    /**\n     * Toggles the new task modal\n     */\n    const toggleNewTaskModal = () => {\n        setNewTaskModal((prevstate) => !prevstate);\n    };\n\n    /**\n     * Creates new empty task with given status\n     * @param status\n     * @param queue\n     */\n    const newTask = (status: string, queue: string) => {\n        setNewTaskDetails({\n            dueDate: new Date(),\n            userAvatar: defaultAvatar,\n            task: 3,\n            comment: 5,\n            status: status,\n            queue: queue,\n        });\n        setNewTaskModal(true);\n    };\n\n    // a little function to help us with reordering the result\n    const reorder = (list: any[], startIndex: number, endIndex: number) => {\n        const result = Array.from(list);\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n\n        return result;\n    };\n\n    /**\n     * Moves an item from one list to another list.\n     */\n    const move = (\n        source: Iterable<unknown> | ArrayLike<unknown>,\n        destination: Iterable<unknown> | ArrayLike<unknown>,\n        droppableSource: { index: number; droppableId: string | number },\n        droppableDestination: { index: number; droppableId: string | number }\n    ) => {\n        const sourceClone = Array.from(source);\n        const destClone = Array.from(destination);\n        const [removed] = sourceClone.splice(droppableSource.index, 1);\n        destClone.splice(droppableDestination.index, 0, removed);\n        const result: any = {};\n        result[droppableSource.droppableId] = sourceClone;\n        result[droppableDestination.droppableId] = destClone;\n\n        return result;\n    };\n\n    /**\n     * Gets the list\n     */\n    const getList = (id: string) => {\n        const modifiedState: any = { ...state };\n        const stateTasks: any = modifiedState[id] && modifiedState[id];\n        return stateTasks;\n    };\n\n    /**\n     * On drag end\n     */\n    const onDragEnd = (result: DropResult) => {\n        const { source, destination } = result;\n\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(getList(source.droppableId), source.index, destination.index);\n            let localState: any = { ...state };\n            localState[source.droppableId] = items;\n            setState(localState);\n        } else {\n            const result = move(getList(source.droppableId), getList(destination.droppableId), source, destination);\n            const localState = { ...state, ...result };\n            setState(localState);\n        }\n    };\n\n    /**\n     * Handles the new task form submission\n     */\n\n    const handleNewTask = (values: any) => {\n        const formData = {\n            title: values['title'],\n            priority: values['priority'],\n            userName: values['userName'],\n        };\n\n        const newTask = {\n            ...newTaskDetails,\n            ...formData,\n            id: totalTasks + 1,\n        };\n\n        let modifiedState: any = { ...state };\n        let tasks = [...getList(newTaskDetails.queue), newTask];\n        modifiedState[newTaskDetails.queue] = [...tasks];\n\n        setState(modifiedState);\n        setNewTaskModal(false);\n        setTotalTasks(totalTasks + 1);\n        // reset the form after submission\n        reset();\n    };\n\n    return (\n        <>\n            <Row>\n                <DragDropContext onDragEnd={onDragEnd}>\n                    {/* todo */}\n                    <Droppable droppableId=\"upcomingTasks\">\n                        {(provided, snapshot) => (\n                            <Col lg={4} ref={provided.innerRef}>\n                                <Card>\n                                    <Card.Body>\n                                        <Dropdown className=\"float-end\" align=\"end\">\n                                            <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                                                <i className=\"mdi mdi-dots-vertical\"></i>\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item>Action</Dropdown.Item>\n                                                <Dropdown.Item>Anothther Action</Dropdown.Item>\n                                                <Dropdown.Item>Something Else</Dropdown.Item>\n                                                <Dropdown.Item>Separated link</Dropdown.Item>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n\n                                        <h5 className=\"header-title mt-0 mb-3 text-primary\">Upcoming</h5>\n                                        {state.upcomingTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        <ul className=\"sortable-list tasklist list-unstyled\" id=\"upcoming\">\n                                            {(state.upcomingTasks || []).map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <li\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                        >\n                                                            <TaskItem task={item} />\n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </ul>\n                                        <div className=\"text-center pt-2\">\n                                            <Link\n                                                to=\"#\"\n                                                className=\"btn btn-primary waves-effect waves-light\"\n                                                onClick={() => newTask('Pending', 'upcomingTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i> Add New\n                                            </Link>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )}\n                    </Droppable>\n\n                    {/* in progress */}\n                    <Droppable droppableId=\"inprogressTasks\">\n                        {(provided, snapshot) => (\n                            <Col lg={4} ref={provided.innerRef}>\n                                <Card>\n                                    <Card.Body>\n                                        <Dropdown className=\"float-end\" align=\"end\">\n                                            <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                                                <i className=\"mdi mdi-dots-vertical\"></i>\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item>Action</Dropdown.Item>\n                                                <Dropdown.Item>Anothther Action</Dropdown.Item>\n                                                <Dropdown.Item>Something Else</Dropdown.Item>\n                                                <Dropdown.Item>Separated link</Dropdown.Item>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n\n                                        <h5 className=\"header-title mt-0 mb-3 text-warning\">In Progress</h5>\n\n                                        {state.inprogressTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        <ul className=\"sortable-list tasklist list-unstyled\" id=\"inprogress\">\n                                            {(state.inprogressTasks || []).map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <li\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                        >\n                                                            <TaskItem task={item} />\n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </ul>\n                                        <div className=\"text-center pt-2\">\n                                            <Link\n                                                to=\"#\"\n                                                className=\"btn btn-primary waves-effect waves-light\"\n                                                onClick={() => newTask('Inprogress', 'inprogressTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i> Add New\n                                            </Link>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )}\n                    </Droppable>\n\n                    {/* done */}\n                    <Droppable droppableId=\"completedTasks\">\n                        {(provided, snapshot) => (\n                            <Col lg={4} ref={provided.innerRef}>\n                                <Card>\n                                    <Card.Body>\n                                        <Dropdown className=\"float-end\" align=\"end\">\n                                            <Dropdown.Toggle as=\"a\" className=\"cursor-pointer card-drop\">\n                                                <i className=\"mdi mdi-dots-vertical\"></i>\n                                            </Dropdown.Toggle>\n                                            <Dropdown.Menu>\n                                                <Dropdown.Item>Action</Dropdown.Item>\n                                                <Dropdown.Item>Anothther Action</Dropdown.Item>\n                                                <Dropdown.Item>Something Else</Dropdown.Item>\n                                                <Dropdown.Item>Separated link</Dropdown.Item>\n                                            </Dropdown.Menu>\n                                        </Dropdown>\n\n                                        <h5 className=\"header-title mt-0 mb-3 text-success\">Completed</h5>\n                                        {state.completedTasks.length === 0 && (\n                                            <p className=\"text-center text-muted pt-2 mb-0\">No Tasks</p>\n                                        )}\n\n                                        <ul className=\"sortable-list tasklist list-unstyled\" id=\"done\">\n                                            {(state.completedTasks || []).map((item, index) => (\n                                                <Draggable key={item.id} draggableId={item.id + ''} index={index}>\n                                                    {(provided, snapshot) => (\n                                                        <li\n                                                            ref={provided.innerRef}\n                                                            {...provided.draggableProps}\n                                                            {...provided.dragHandleProps}\n                                                        >\n                                                            <TaskItem task={item} />\n                                                        </li>\n                                                    )}\n                                                </Draggable>\n                                            ))}\n                                            {provided.placeholder}\n                                        </ul>\n                                        <div className=\"text-center pt-2\">\n                                            <Link\n                                                to=\"#\"\n                                                className=\"btn btn-primary waves-effect waves-light\"\n                                                onClick={() => newTask('Done', 'completedTasks')}\n                                            >\n                                                <i className=\"mdi mdi-plus\"></i> Add New\n                                            </Link>\n                                        </div>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )}\n                    </Droppable>\n                    {/* </div> */}\n                </DragDropContext>\n            </Row>\n\n            {/* add new task modal */}\n            {newTaskDetails && (\n                <Modal show={newTaskModal} onHide={toggleNewTaskModal} centered>\n                    <Modal.Header closeButton>\n                        <h4 className=\"modal-title\">Add New Task</h4>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <form onSubmit={handleSubmit(handleNewTask)} className=\"px-2\">\n                            <FormInput\n                                name=\"title\"\n                                label=\"Title\"\n                                placeholder=\"Enter title\"\n                                type=\"text\"\n                                containerClass=\"mb-3\"\n                                className=\"form-control\"\n                                register={register}\n                                key=\"title\"\n                                errors={errors}\n                                control={control}\n                            />\n\n                            <Row>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"userName\"\n                                        label=\"Assign To\"\n                                        placeholder=\"Enter Name\"\n                                        type=\"text\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-control\"\n                                        register={register}\n                                        key=\"userName\"\n                                        errors={errors}\n                                        control={control}\n                                    />\n                                </Col>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"priority\"\n                                        label=\"Priority\"\n                                        type=\"select\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-select\"\n                                        register={register}\n                                        key=\"priority\"\n                                        errors={errors}\n                                        control={control}\n                                    >\n                                        <option value=\"\">Select</option>\n                                        <option value=\"Urgent\">Urgent</option>\n                                        <option value=\"High\">High</option>\n                                    </FormInput>\n                                </Col>\n                            </Row>\n\n                            <Row>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"startDate\"\n                                        label=\"Start Date\"\n                                        placeholder=\"Enter Date\"\n                                        type=\"text\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-control\"\n                                        register={register}\n                                        key=\"startDate\"\n                                        errors={errors}\n                                        control={control}\n                                    />\n                                </Col>\n                                <Col md={6}>\n                                    <FormInput\n                                        name=\"DueDate\"\n                                        label=\"Due Date\"\n                                        placeholder=\"Enter Date\"\n                                        type=\"text\"\n                                        containerClass=\"mb-3\"\n                                        className=\"form-control\"\n                                        register={register}\n                                        key=\"DueDate\"\n                                        errors={errors}\n                                        control={control}\n                                    />\n                                </Col>\n                            </Row>\n\n                            <div className=\"text-start\">\n                                <Button variant=\"success\" type=\"submit\">\n                                    Save\n                                </Button>\n                                <Button variant=\"danger\" className=\"ms-1\" onClick={toggleNewTaskModal}>\n                                    Cancel\n                                </Button>\n                            </div>\n                        </form>\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport default Kanban;\n"],"names":["PasswordInput","name","placeholder","refCallback","errors","register","control","className","otherProps","useState","showPassword","setShowPassword","type","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","TextualInput","endIcon","comp","rows","CheckInput","label","SelectInput","children","labelClassName","containerClass","action","hasEndIcon","undefined","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","formState","noValidate","Array","isArray","map","child","props","React","key","task","priority","Form","to","title","OverlayTrigger","placement","overlay","Tooltip","userName","src","userAvatar","alt","comment","tasks","status","avatar1","avatar2","avatar3","avatar4","avatar5","avatar6","avatar7","avatar8","avatar9","avatar10","usePageTitle","breadCrumbItems","path","active","upcomingTasks","filter","t","inprogressTasks","completedTasks","state","setState","length","totalTasks","setTotalTasks","newTaskModal","setNewTaskModal","newTaskDetails","setNewTaskDetails","schemaResolver","yupResolver","yup","shape","required","reset","toggleNewTaskModal","prevstate","newTask","queue","dueDate","Date","defaultAvatar","getList","modifiedState","Row","onDragEnd","result","source","destination","droppableId","items","list","startIndex","endIndex","from","splice","removed","reorder","index","localState","droppableSource","droppableDestination","sourceClone","destClone","move","provided","snapshot","Col","lg","innerRef","Card","Dropdown","align","item","draggableId","draggableProps","dragHandleProps","Task","Modal","show","onHide","centered","closeButton","values","formData","md","value","Button","variant"],"sourceRoot":""}